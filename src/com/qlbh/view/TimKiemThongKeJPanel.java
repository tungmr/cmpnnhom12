/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.qlbh.view;

import com.qlbh.dao.BieuDoNhanVienDAO;
import com.qlbh.dao.BieuDoSanPhamDAO;
import com.qlbh.dao.ChiTietHoaDonDAO;
import com.qlbh.dao.HoaDonDAO;
import com.qlbh.dao.KhachHangDAO;
import com.qlbh.dao.NhaCungCapDAO;
import com.qlbh.dao.NhanVienDAO;
import com.qlbh.dao.SanPhamDAO;
import com.qlbh.dao.UserDAO;
import com.qlbh.model.BieuDoNhanVien;
import com.qlbh.model.BieuDoSanPham;
import com.qlbh.model.ChiTietHoaDon;
import com.qlbh.model.HoaDon;
import com.qlbh.model.KhachHang;
import com.qlbh.model.NhaCungCap;
import com.qlbh.model.NhanVien;
import com.qlbh.model.SanPham;
import com.qlbh.model.User;
import com.qlbh.tools.Excel;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HoangDucTung
 */
public class TimKiemThongKeJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TimKiemThongKeJPanel
     */
    ImageIcon sai = new ImageIcon("tinhsai.png");
    ImageIcon dung = new ImageIcon("dau-check.png");
    DefaultTableModel ketQuaTableModel;
    DefaultTableModel ketQuaThongKeSoLuongTableModel;
    DefaultTableModel thongKeTheoThangTableModel;

    DecimalFormat format = new DecimalFormat("###,###,###");
    User user = null;

    public TimKiemThongKeJPanel(String username) {
        initComponents();
        kiemTraHoaDonRong();
        ketQuaTableModel = (DefaultTableModel) timKiemjTable.getModel();
        ketQuaThongKeSoLuongTableModel = (DefaultTableModel) thongKejTable.getModel();
        user = UserDAO.getMotUser(username);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        timKiemjPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        timKiemjTable = new javax.swing.JTable();
        tuKhoaTimKiemjLabel = new javax.swing.JLabel();
        tuKhoaTimKiemjTextField = new javax.swing.JTextField();
        loaiTimKiemjComboBox = new javax.swing.JComboBox<>();
        loaTimKiemjLabel = new javax.swing.JLabel();
        thuocTimKiemjLabel = new javax.swing.JLabel();
        thuocTimKiemjComboBox = new javax.swing.JComboBox<>();
        timKiemjButton = new javax.swing.JButton();
        xuatTiemKiemjButton = new javax.swing.JButton();
        thongKejPanel = new javax.swing.JPanel();
        thangThongKejLabel = new javax.swing.JLabel();
        thangThongKejComboBox = new javax.swing.JComboBox<>();
        xemThangThongKejButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        thongKejTable = new javax.swing.JTable();
        xuatThongKejButton = new javax.swing.JButton();
        thongKejComboBox = new javax.swing.JComboBox<>();
        xemThongKejButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TÌM KIẾM VÀ THỐNG KÊ");

        timKiemjPanel.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        timKiemjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        timKiemjTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(timKiemjTable);

        tuKhoaTimKiemjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        tuKhoaTimKiemjLabel.setForeground(new java.awt.Color(0, 102, 102));
        tuKhoaTimKiemjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/key.png"))); // NOI18N
        tuKhoaTimKiemjLabel.setText("Từ khóa");

        loaiTimKiemjComboBox.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        loaiTimKiemjComboBox.setForeground(new java.awt.Color(0, 102, 102));
        loaiTimKiemjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Mã", "Tên" }));
        loaiTimKiemjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loaiTimKiemjComboBoxActionPerformed(evt);
            }
        });

        loaTimKiemjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        loaTimKiemjLabel.setForeground(new java.awt.Color(0, 102, 102));
        loaTimKiemjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/list.png"))); // NOI18N
        loaTimKiemjLabel.setText("Loại");

        thuocTimKiemjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        thuocTimKiemjLabel.setForeground(new java.awt.Color(0, 102, 102));
        thuocTimKiemjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/diagram.png"))); // NOI18N
        thuocTimKiemjLabel.setText("Thuộc");

        thuocTimKiemjComboBox.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        thuocTimKiemjComboBox.setForeground(new java.awt.Color(0, 102, 102));
        thuocTimKiemjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Sản phẩm", "Nhà cung cấp", "Khách hàng", "Hóa đơn" }));
        thuocTimKiemjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thuocTimKiemjComboBoxActionPerformed(evt);
            }
        });

        timKiemjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        timKiemjButton.setForeground(new java.awt.Color(0, 102, 102));
        timKiemjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/search.png"))); // NOI18N
        timKiemjButton.setText("TÌM");
        timKiemjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timKiemjButtonActionPerformed(evt);
            }
        });

        xuatTiemKiemjButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        xuatTiemKiemjButton.setForeground(new java.awt.Color(0, 102, 102));
        xuatTiemKiemjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/share.png"))); // NOI18N
        xuatTiemKiemjButton.setText("XUẤT");
        xuatTiemKiemjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xuatTiemKiemjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout timKiemjPanelLayout = new javax.swing.GroupLayout(timKiemjPanel);
        timKiemjPanel.setLayout(timKiemjPanelLayout);
        timKiemjPanelLayout.setHorizontalGroup(
            timKiemjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timKiemjPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(xuatTiemKiemjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
            .addGroup(timKiemjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(timKiemjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(timKiemjPanelLayout.createSequentialGroup()
                        .addGroup(timKiemjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loaTimKiemjLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tuKhoaTimKiemjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                        .addGap(39, 39, 39)
                        .addGroup(timKiemjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(timKiemjPanelLayout.createSequentialGroup()
                                .addComponent(loaiTimKiemjComboBox, 0, 126, Short.MAX_VALUE)
                                .addGap(83, 83, 83)
                                .addComponent(thuocTimKiemjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                .addGap(26, 26, 26)
                                .addComponent(thuocTimKiemjComboBox, 0, 201, Short.MAX_VALUE))
                            .addComponent(tuKhoaTimKiemjTextField))
                        .addGap(96, 96, 96)
                        .addComponent(timKiemjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(225, 225, 225)))
                .addContainerGap())
        );
        timKiemjPanelLayout.setVerticalGroup(
            timKiemjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timKiemjPanelLayout.createSequentialGroup()
                .addGroup(timKiemjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(timKiemjPanelLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(timKiemjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tuKhoaTimKiemjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tuKhoaTimKiemjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(timKiemjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loaTimKiemjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loaiTimKiemjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(thuocTimKiemjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(thuocTimKiemjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timKiemjPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(timKiemjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addGap(27, 27, 27)
                .addComponent(xuatTiemKiemjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("TÌM KIẾM   ", new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/search5.png")), timKiemjPanel); // NOI18N

        thongKejPanel.setBackground(new java.awt.Color(255, 255, 255));

        thangThongKejLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        thangThongKejLabel.setForeground(new java.awt.Color(0, 102, 102));
        thangThongKejLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/weekly-calendar.png"))); // NOI18N
        thangThongKejLabel.setText("Chọn tháng");

        thangThongKejComboBox.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        thangThongKejComboBox.setForeground(new java.awt.Color(0, 102, 102));
        thangThongKejComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        xemThangThongKejButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        xemThangThongKejButton.setForeground(new java.awt.Color(0, 102, 102));
        xemThangThongKejButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/hunter (1).png"))); // NOI18N
        xemThangThongKejButton.setText("XEM");
        xemThangThongKejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xemThangThongKejButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(null);

        thongKejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        thongKejTable.setEnabled(false);
        thongKejTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(thongKejTable);

        xuatThongKejButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        xuatThongKejButton.setForeground(new java.awt.Color(0, 102, 102));
        xuatThongKejButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/share.png"))); // NOI18N
        xuatThongKejButton.setText("XUẤT");
        xuatThongKejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xuatThongKejButtonActionPerformed(evt);
            }
        });

        thongKejComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        thongKejComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Thống kê 5 đơn hàng giá trị nhất", "Thống kê số lượng đơn hàng của từng nhân viên", "Thống kê các sản phẩm bán nhiều nhất" }));

        xemThongKejButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        xemThongKejButton.setForeground(new java.awt.Color(0, 102, 102));
        xemThongKejButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/hunter (1).png"))); // NOI18N
        xemThongKejButton.setText("XEM");
        xemThongKejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xemThongKejButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout thongKejPanelLayout = new javax.swing.GroupLayout(thongKejPanel);
        thongKejPanel.setLayout(thongKejPanelLayout);
        thongKejPanelLayout.setHorizontalGroup(
            thongKejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thongKejPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1244, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, thongKejPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(xuatThongKejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
            .addGroup(thongKejPanelLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(thangThongKejLabel)
                .addGap(131, 131, 131)
                .addGroup(thongKejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(thongKejComboBox, 0, 300, Short.MAX_VALUE)
                    .addComponent(thangThongKejComboBox, 0, 300, Short.MAX_VALUE))
                .addGap(133, 133, 133)
                .addGroup(thongKejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(xemThongKejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xemThangThongKejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        thongKejPanelLayout.setVerticalGroup(
            thongKejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thongKejPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(thongKejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thangThongKejLabel)
                    .addComponent(thangThongKejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xemThangThongKejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(thongKejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(thongKejComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(xemThongKejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(xuatThongKejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("THỐNG KÊ   ", new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/analysis5.png")), thongKejPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void kiemTraHoaDonRong(){
        ArrayList<HoaDon> listHoaDon = HoaDonDAO.getListHoaDon();
        for (HoaDon hoaDon : listHoaDon){
            if (ChiTietHoaDonDAO.khongChuaHoaDon(hoaDon.getMaHoaDon())){
                HoaDonDAO.xoaHoaDon(hoaDon.getMaHoaDon());
            }
        }
    }
    
    private void loaiTimKiemjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loaiTimKiemjComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loaiTimKiemjComboBoxActionPerformed

    private void thuocTimKiemjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thuocTimKiemjComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_thuocTimKiemjComboBoxActionPerformed

    public boolean kiemTraQuyenUserLaNhanVien() {
        return (user.getRole() == 2);
    }

    private void timKiemjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timKiemjButtonActionPerformed
        // TODO add your handling code here:
        try {
            ketQuaTableModel.setRowCount(0);
            String tuKhoa = tuKhoaTimKiemjTextField.getText();
            String loaiTimKiem = loaiTimKiemjComboBox.getSelectedItem().toString();
            String thuocTimKiem = thuocTimKiemjComboBox.getSelectedItem().toString();
            if (tuKhoa.equals("") || loaiTimKiem.equals(" ") || thuocTimKiem.equals(" ")) {
                JOptionPane.showMessageDialog(null, "Vui lòng chọn đầy đủ thông tin để tìm", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

            } else {
                if (loaiTimKiem.equals("Mã")) {
                    switch (thuocTimKiem) {
                        case "Sản phẩm":
                            ArrayList<SanPham> listSP = SanPhamDAO.timKiemSanPhamTheoMa(tuKhoa);
                            String[] colSP = {"STT", "Mã sản phẩn", "Tên sản phẩm", "Số lượng", "Đơn giá", "Mã nhà cung cấp", "Mã nhân viên"};
                            ketQuaTableModel.setColumnIdentifiers(colSP);
                            for (int i = 0; i < listSP.size(); i++) {
                                ketQuaTableModel.addRow(new Object[]{
                                    i + 1,
                                    listSP.get(i).getMaSanPham(),
                                    listSP.get(i).getTenSanPham(),
                                    listSP.get(i).getSoLuong(),
                                    format.format(listSP.get(i).getDonGia()),
                                    listSP.get(i).getMaNhaCungCapSP(),
                                    listSP.get(i).getMaNhanVienSP(),});
                            }
                            break;
                        case "Nhà cung cấp":
                            ArrayList<NhaCungCap> listNCC = NhaCungCapDAO.timKiemNhaCungCapTheoMa(tuKhoa);
                            String[] colNCC = {"STT", "Mã nhà cung cấp", "Tên nhà cung cấp", "Địa chỉ", "Email", "Số điện thoại"};
                            ketQuaTableModel.setColumnIdentifiers(colNCC);
                            for (int i = 0; i < listNCC.size(); i++) {
                                ketQuaTableModel.addRow(new Object[]{
                                    i + 1,
                                    listNCC.get(i).getMaNhaCungCap(),
                                    listNCC.get(i).getTenNhaCungCap(),
                                    listNCC.get(i).getDiaChiNhaCungCap(),
                                    listNCC.get(i).getEmailNhaCungCap(),
                                    listNCC.get(i).getSoDienThoaiNCC(),});
                            }
                            break;
                        case "Khách hàng":
                            ArrayList<KhachHang> listKH = KhachHangDAO.timKiemKhachHangTheoMa(tuKhoa);
                            String[] colKH = {"STT", "Mã khách hàng", "Tên khách hàng", "Email", "Địa chỉ", "Số điện thoại"};
                            ketQuaTableModel.setColumnIdentifiers(colKH);
                            for (int i = 0; i < listKH.size(); i++) {
                                ketQuaTableModel.addRow(new Object[]{
                                    i + 1,
                                    listKH.get(i).getMaKhachHang(),
                                    listKH.get(i).getTenKhachHang(),
                                    listKH.get(i).getEmailKhachHang(),
                                    listKH.get(i).getDiaChiKhachHang(),
                                    listKH.get(i).getSoDienThoaiKH(),});
                            }
                            break;
                        case "Hóa đơn":
                            HoaDon hoaDon = HoaDonDAO.getHoaDon(Long.parseLong(tuKhoa));
                            ArrayList<ChiTietHoaDon> listChiTiet = ChiTietHoaDonDAO.getMotChiTietHoaDon(Long.parseLong(tuKhoa));

                            if (hoaDon.getMaKhachHangMua() == null) {
                                String[] colHD = {"Mã hóa đơn", "Tên khách hàng", "Địa chỉ", "Số điện thoại", "Mã sản phẩm", "Tên sản phẩm",
                                    "Đơn giá", "Số lượng", "Thành tiền", "Ngày mua", "Mã nhân viên"
                                };
                                ketQuaTableModel.setColumnIdentifiers(colHD);
                                for (int i = 0; i < listChiTiet.size(); i++) {
                                    SanPham sanPham = SanPhamDAO.getMotSanPham(listChiTiet.get(i).getMaSanPhamMua());
                                    ketQuaTableModel.addRow(new Object[]{
                                        tuKhoa,
                                        hoaDon.getTenKhachHangMua(),
                                        hoaDon.getDiaChiKhachHangMua(),
                                        hoaDon.getSoDienThoaiKH(),
                                        listChiTiet.get(i).getMaSanPhamMua(),
                                        sanPham.getTenSanPham(),
                                        format.format(listChiTiet.get(i).getGiaSanPhamMua()),
                                        listChiTiet.get(i).getSoLuongMua(),
                                        format.format(listChiTiet.get(i).tinhTien()),
                                        hoaDon.getNgayMua(),
                                        hoaDon.getMaNhanVienBan()
                                    });

                                }
                            } else {

                                String[] colHD = {"Mã hóa đơn", "Mã khách hàng", "Tên khách hàng", "Mã sản phẩm", "Tên sản phẩm",
                                    "Đơn giá", "Số lượng", "Thành tiền", "Ngày mua", "Mã nhân viên"
                                };
                                ketQuaTableModel.setColumnIdentifiers(colHD);
                                for (int i = 0; i < listChiTiet.size(); i++) {
                                    KhachHang khachHang = KhachHangDAO.getMotKhachHang(hoaDon.getMaKhachHangMua());
                                    SanPham sanPham = SanPhamDAO.getMotSanPham(listChiTiet.get(i).getMaSanPhamMua());
                                    ketQuaTableModel.addRow(new Object[]{
                                        tuKhoa,
                                        hoaDon.getMaKhachHangMua(),
                                        khachHang.getTenKhachHang(),
                                        listChiTiet.get(i).getMaSanPhamMua(),
                                        sanPham.getTenSanPham(),
                                        format.format(listChiTiet.get(i).getGiaSanPhamMua()),
                                        listChiTiet.get(i).getSoLuongMua(),
                                        format.format(listChiTiet.get(i).tinhTien()),
                                        hoaDon.getNgayMua(),
                                        hoaDon.getMaNhanVienBan()
                                    });
                                }

                            }
                            break;
                        default:
                            break;
                    }
                } else {

                    switch (thuocTimKiem) {
                        case "Sản phẩm":
                            ArrayList<SanPham> listSP = SanPhamDAO.timKiemSanPhamTheoTen(tuKhoa);
                            String[] colSP = {"STT", "Mã sản phẩn", "Tên sản phẩm", "Số lượng", "Đơn giá", "Mã nhà cung cấp", "Mã nhân viên"};
                            ketQuaTableModel.setColumnIdentifiers(colSP);
                            for (int i = 0; i < listSP.size(); i++) {
                                ketQuaTableModel.addRow(new Object[]{
                                    i + 1,
                                    listSP.get(i).getMaSanPham(),
                                    listSP.get(i).getTenSanPham(),
                                    listSP.get(i).getSoLuong(),
                                    format.format(listSP.get(i).getDonGia()),
                                    listSP.get(i).getMaNhaCungCapSP(),
                                    listSP.get(i).getMaNhanVienSP(),});
                            }
                            break;
                        case "Nhà cung cấp":
                            ArrayList<NhaCungCap> listNCC = NhaCungCapDAO.timKiemNhaCungCapTheoTen(tuKhoa);
                            String[] colNCC = {"STT", "Mã nhà cung cấp", "Tên nhà cung cấp", "Địa chỉ", "Email", "Số điện thoại"};
                            ketQuaTableModel.setColumnIdentifiers(colNCC);
                            for (int i = 0; i < listNCC.size(); i++) {
                                ketQuaTableModel.addRow(new Object[]{
                                    i + 1,
                                    listNCC.get(i).getMaNhaCungCap(),
                                    listNCC.get(i).getTenNhaCungCap(),
                                    listNCC.get(i).getDiaChiNhaCungCap(),
                                    listNCC.get(i).getEmailNhaCungCap(),
                                    listNCC.get(i).getSoDienThoaiNCC(),});
                            }
                            break;
                        case "Khách hàng":
                            ArrayList<KhachHang> listKH = KhachHangDAO.timKiemKhachHangTheoTen(tuKhoa);
                            String[] colKH = {"STT", "Mã khách hàng", "Tên khách hàng", "Email", "Địa chỉ", "Số điện thoại"};
                            ketQuaTableModel.setColumnIdentifiers(colKH);
                            for (int i = 0; i < listKH.size(); i++) {
                                ketQuaTableModel.addRow(new Object[]{
                                    i + 1,
                                    listKH.get(i).getMaKhachHang(),
                                    listKH.get(i).getTenKhachHang(),
                                    listKH.get(i).getEmailKhachHang(),
                                    listKH.get(i).getDiaChiKhachHang(),
                                    listKH.get(i).getSoDienThoaiKH(),});
                            }
                            break;

                        case "Hóa đơn":
                            JOptionPane.showMessageDialog(null, "Hóa đơn chỉ tìm kiếm theo mã", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                            break;
                        default:
                            break;
                    }
                }

                if (ketQuaTableModel.getRowCount() == 0) {
                    String[] col = {};
                    ketQuaTableModel.setColumnIdentifiers(col);
                    JOptionPane.showMessageDialog(null, "Không tìm thấy kết quả", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kiểm tra giá trị nhập vào", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
        }
    }//GEN-LAST:event_timKiemjButtonActionPerformed

    private void xemThangThongKejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xemThangThongKejButtonActionPerformed
        // TODO add your handling code here:
        if (kiemTraQuyenUserLaNhanVien()) {
            JOptionPane.showMessageDialog(null, "Bạn không có quyền dùng chức năng này", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
        } else {
            String thang = thangThongKejComboBox.getSelectedItem().toString();
            if (thang.equals(" ")) {
                JOptionPane.showMessageDialog(null, "Chọn tháng để xem", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
            }
            try {
                int thangSo = Integer.parseInt(thang);
                ArrayList<HoaDon> listHD = HoaDonDAO.thongKeTheoThang(thangSo);
                thongKeTheoThangTableModel = (DefaultTableModel) thongKejTable.getModel();
                thongKeTheoThangTableModel.setRowCount(0);
                String[] col = {"STT", "Mã hóa đơn", "Mã khách hàng", "Tên khách hàng", "Số điện thoại", "Địa chỉ", "Ngày mua", "Tổng tiền", "Mã nhân viên"};
                thongKeTheoThangTableModel.setColumnIdentifiers(col);
                for (int i = 0; i < listHD.size(); i++) {
                    ArrayList<ChiTietHoaDon> listChiTiet = ChiTietHoaDonDAO.getMotChiTietHoaDon(listHD.get(i).getMaHoaDon());
                    if (listHD.get(i).getMaKhachHangMua() == null) {
                        thongKeTheoThangTableModel.addRow(new Object[]{
                            i + 1,
                            listHD.get(i).getMaHoaDon(),
                            "",
                            listHD.get(i).getTenKhachHangMua(),
                            listHD.get(i).getSoDienThoaiKH(),
                            listHD.get(i).getDiaChiKhachHangMua(),
                            listHD.get(i).getNgayMua(),
                            format.format(listHD.get(i).getTongTien(listChiTiet)),
                            listHD.get(i).getMaNhanVienBan()
                        });
                    } else {
                        KhachHang khachHang = KhachHangDAO.getMotKhachHang(listHD.get(i).getMaKhachHangMua());
                        thongKeTheoThangTableModel.addRow(new Object[]{
                            i + 1,
                            listHD.get(i).getMaHoaDon(),
                            listHD.get(i).getMaKhachHangMua(),
                            khachHang.getTenKhachHang(),
                            khachHang.getSoDienThoaiKH(),
                            khachHang.getDiaChiKhachHang(),
                            listHD.get(i).getNgayMua(),
                            format.format(listHD.get(i).getTongTien(listChiTiet)),
                            listHD.get(i).getMaNhanVienBan()
                        });

                    }
                }

                if (thongKeTheoThangTableModel.getRowCount() == 0) {
                    String[] colkq = {};
                    thongKeTheoThangTableModel.setColumnIdentifiers(colkq);
                    JOptionPane.showMessageDialog(null, "Không tìm thấy kết quả", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                }

            } catch (Exception e) {

            }
        }


    }//GEN-LAST:event_xemThangThongKejButtonActionPerformed

    private void xuatTiemKiemjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xuatTiemKiemjButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setCurrentDirectory(new java.io.File("."));
        jFileChooser.setDialogTitle("Chọn thư mục để lưu");
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser.setAcceptAllFileFilterUsed(false);
        if (jFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            Excel.xuatFileExcel(timKiemjTable, jFileChooser.getSelectedFile() + "\\\\timkiem.xls");
            JOptionPane.showMessageDialog(null, "Đã lưu file tại đường dẫn: " + jFileChooser.getSelectedFile(), "Message", JOptionPane.INFORMATION_MESSAGE, dung);
        } 
    }//GEN-LAST:event_xuatTiemKiemjButtonActionPerformed

    private void xuatThongKejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xuatThongKejButtonActionPerformed
        // TODO add your handling code here:
        if (user.getRole() == 1) {
            JFileChooser jFileChooser = new JFileChooser();
            jFileChooser.setCurrentDirectory(new java.io.File("."));
            jFileChooser.setDialogTitle("Chọn thư mục để lưu");
            jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            jFileChooser.setAcceptAllFileFilterUsed(false);
            if (jFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                Excel.xuatFileExcel(thongKejTable, jFileChooser.getSelectedFile() + "\\\\thongke.xls");
                JOptionPane.showMessageDialog(null, "Đã lưu file tại đường dẫn: " + jFileChooser.getSelectedFile(), "Message", JOptionPane.INFORMATION_MESSAGE, dung);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Bạn không có quyền dùng chức năng này", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

        }

    }//GEN-LAST:event_xuatThongKejButtonActionPerformed

    private void xemThongKejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xemThongKejButtonActionPerformed
        // TODO add your handling code here:
        if (kiemTraQuyenUserLaNhanVien()) {
            JOptionPane.showMessageDialog(null, "Bạn không có quyền dùng chức năng này", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

        } else {
            try {
                String luaChon = thongKejComboBox.getSelectedItem().toString();
                thongKeTheoThangTableModel = (DefaultTableModel) thongKejTable.getModel();

                thongKeTheoThangTableModel.setRowCount(0);
                switch (luaChon) {
                    case " ":
                        JOptionPane.showMessageDialog(null, "Vui lòng chọn để thống kê", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                        break;
                    case "Thống kê 5 đơn hàng giá trị nhất":
                        ArrayList<HoaDon> listHoaDon = HoaDonDAO.getListHoaDon();
                        for (int i = 0; i < listHoaDon.size(); i++) {
                            ArrayList<ChiTietHoaDon> listChiTiet = ChiTietHoaDonDAO.getMotChiTietHoaDon(listHoaDon.get(i).getMaHoaDon());
                            listHoaDon.get(i).setTongTienHoaDon(listChiTiet);
                        }

                        Collections.sort(listHoaDon, new Comparator<HoaDon>() {
                            @Override
                            public int compare(HoaDon o1, HoaDon o2) {
                                return o1.getTongTienHoaDon() > o2.getTongTienHoaDon() ? -1 : 1;
                            }

                        });

                        for (int i = 0; i < 5; i++) {
                            String[] col = {"STT", "Mã hóa đơn", "Mã khách hàng", "Tên khách hàng", "Số điện thoại", "Địa chỉ", "Tổng tiền", "Ngày mua", "Mã nhân viên"};
                            thongKeTheoThangTableModel.setColumnIdentifiers(col);
                            if (listHoaDon.get(i).getMaKhachHangMua() == null) {
                                thongKeTheoThangTableModel.addRow(new Object[]{
                                    i + 1,
                                    listHoaDon.get(i).getMaHoaDon(),
                                    "",
                                    listHoaDon.get(i).getTenKhachHangMua(),
                                    listHoaDon.get(i).getSoDienThoaiKH(),
                                    listHoaDon.get(i).getDiaChiKhachHangMua(),
                                    format.format(listHoaDon.get(i).getTongTienHoaDon()),
                                    listHoaDon.get(i).getNgayMua(),
                                    listHoaDon.get(i).getMaNhanVienBan()
                                });
                            } else {
                                KhachHang khachHang = KhachHangDAO.getMotKhachHang(listHoaDon.get(i).getMaKhachHangMua());
                                thongKeTheoThangTableModel.addRow(new Object[]{
                                    i + 1,
                                    listHoaDon.get(i).getMaHoaDon(),
                                    listHoaDon.get(i).getMaKhachHangMua(),
                                    khachHang.getTenKhachHang(),
                                    khachHang.getSoDienThoaiKH(),
                                    khachHang.getDiaChiKhachHang(),
                                    format.format(listHoaDon.get(i).getTongTienHoaDon()),
                                    listHoaDon.get(i).getNgayMua(),
                                    listHoaDon.get(i).getMaNhanVienBan()
                                });
                            }

                        }

                        break;

                    case "Thống kê số lượng đơn hàng của từng nhân viên":
                        ArrayList<BieuDoNhanVien> listTKDHNV = BieuDoNhanVienDAO.getListThongKeSoLuongDonHangCuaNhanVien();
                        String[] col = {"STT", "Mã nhân viên", "Tên nhân viên", "Giới tính", "Ngày sinh", "Địa chỉ", "Số điện thoại", "Email", "Số lượng đơn hàng"};
                        thongKeTheoThangTableModel.setColumnIdentifiers(col);
                        for (int i = 0; i < listTKDHNV.size(); i++) {
                            NhanVien nhanVien = NhanVienDAO.getNhanVien(listTKDHNV.get(i).getMaNhanVien());
                            thongKeTheoThangTableModel.addRow(new Object[]{
                                i + 1,
                                listTKDHNV.get(i).getMaNhanVien(),
                                nhanVien.getTenNhanVien(),
                                nhanVien.isGioiTinh() == true ? "Nam" : "Nữ",
                                nhanVien.getNgaySinh(),
                                nhanVien.getDiaChiNhanVien(),
                                nhanVien.getSoDienThoai(),
                                nhanVien.getEmailNhanVien(),
                                listTKDHNV.get(i).getSoLuongHoaDon()
                            });
                        }
                        break;
                    case "Thống kê các sản phẩm bán nhiều nhất":
                        ArrayList<BieuDoSanPham> listSPBanChay = BieuDoSanPhamDAO.getListBieuDoSanPham();
                        String[] colSP = {"STT", "Mã sản phẩm", "Tên sản phẩm", "Mã nhà cung cấp", "Đơn giá", "Số lượng", "Mã nhân viên", "Số lượng đã bán"};
                        thongKeTheoThangTableModel.setColumnIdentifiers(colSP);
                        Collections.sort(listSPBanChay, new Comparator<BieuDoSanPham>() {
                            @Override
                            public int compare(BieuDoSanPham o1, BieuDoSanPham o2) {
                                return o1.getSoLuongBan() > o2.getSoLuongBan() ? -1 : 1;
                            }

                        });
                        for (int i = 0; i < listSPBanChay.size(); i++) {
                            SanPham sanPham = SanPhamDAO.getMotSanPham(listSPBanChay.get(i).getMaSanPham());
                            thongKeTheoThangTableModel.addRow(new Object[]{
                                i + 1,
                                sanPham.getMaSanPham(),
                                sanPham.getTenSanPham(),
                                sanPham.getMaNhaCungCapSP(),
                                sanPham.getDonGia(),
                                sanPham.getSoLuong(),
                                sanPham.getMaNhanVienSP(),
                                listSPBanChay.get(i).getSoLuongBan()
                            });
                        }
                        break;
                    default:
                        break;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }


    }//GEN-LAST:event_xemThongKejButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel loaTimKiemjLabel;
    private javax.swing.JComboBox<String> loaiTimKiemjComboBox;
    private javax.swing.JComboBox<String> thangThongKejComboBox;
    private javax.swing.JLabel thangThongKejLabel;
    private javax.swing.JComboBox<String> thongKejComboBox;
    private javax.swing.JPanel thongKejPanel;
    private javax.swing.JTable thongKejTable;
    private javax.swing.JComboBox<String> thuocTimKiemjComboBox;
    private javax.swing.JLabel thuocTimKiemjLabel;
    private javax.swing.JButton timKiemjButton;
    private javax.swing.JPanel timKiemjPanel;
    private javax.swing.JTable timKiemjTable;
    private javax.swing.JLabel tuKhoaTimKiemjLabel;
    private javax.swing.JTextField tuKhoaTimKiemjTextField;
    private javax.swing.JButton xemThangThongKejButton;
    private javax.swing.JButton xemThongKejButton;
    private javax.swing.JButton xuatThongKejButton;
    private javax.swing.JButton xuatTiemKiemjButton;
    // End of variables declaration//GEN-END:variables
}
