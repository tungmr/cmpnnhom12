/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.qlbh.view;

import com.qlbh.dao.ChiTietHoaDonDAO;
import com.qlbh.dao.HoaDonDAO;
import com.qlbh.dao.KhachHangDAO;
import com.qlbh.dao.SanPhamDAO;
import com.qlbh.model.ChiTietHoaDon;
import com.qlbh.model.HoaDon;
import com.qlbh.model.KhachHang;
import com.qlbh.model.SanPham;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HoangDucTung
 */
public class BanHangJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BanHangJPanel
     */
    DefaultTableModel thanhVienDefaultTableModel;
    DefaultTableModel koThanhVienDefaultTableModel;
    DefaultTableModel sanPhamThanhVienDefaultTableModel;
    DefaultTableModel sanPhamKhongThanhVienDefaultTableModel;
    ArrayList<HoaDon> listHoaDon = new ArrayList<>();
    ArrayList<SanPham> listSanPham = new ArrayList<>();
    ArrayList<KhachHang> listKhachHang = new ArrayList<>();
    ImageIcon sai = new ImageIcon("tinhsai.png");
    ImageIcon dung = new ImageIcon("dau-check.png");
    DecimalFormat format = new DecimalFormat("### ### ###");

    public BanHangJPanel(String username) {
        initComponents();
        thanhVienDefaultTableModel = (DefaultTableModel) banhangTVjTable.getModel();
        koThanhVienDefaultTableModel = (DefaultTableModel) banHangKTVjTable.getModel();
        sanPhamThanhVienDefaultTableModel = (DefaultTableModel) sanPhamBHTVjTable.getModel();
        sanPhamKhongThanhVienDefaultTableModel = (DefaultTableModel) sanPhamBHKTVjTable.getModel();

        loadMaKhachHang("");
        loadMaSanPham();
        loadMaSanPhamBHKTV();
        loadBanHang();
        maNhanVienBHKTVjTextField.setText(username.toUpperCase());
        maNhanVienBHTVjTextField.setText(username.toUpperCase());
        maNhanVienBHKTVjTextField.setEditable(false);
        maNhanVienBHTVjTextField.setEditable(false);

        huyBHtvjButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        banhangTVjTable = new javax.swing.JTable();
        maDonHangBHtvjLabel = new javax.swing.JLabel();
        maSanPhamBHtvjLabel = new javax.swing.JLabel();
        maSanPhamBHtvjComboBox = new javax.swing.JComboBox<>();
        xuatBHtvjButton = new javax.swing.JButton();
        maKhachHangBHtvjLabel = new javax.swing.JLabel();
        nhapBHtvjButton = new javax.swing.JButton();
        suaBHtvjButton = new javax.swing.JButton();
        ngayMuaBHTVjTextField = new javax.swing.JTextField();
        soLuongBHtvjLabel = new javax.swing.JLabel();
        soLuongBHtvjTextField = new javax.swing.JTextField();
        maNhanVienBHtvjLabel = new javax.swing.JLabel();
        maDonHangBHtvjTextField = new javax.swing.JTextField();
        huyBHtvjButton = new javax.swing.JButton();
        themBHtvjButton = new javax.swing.JButton();
        xoaBHtvjButton = new javax.swing.JButton();
        maKhachHangBHTVjComboBox = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        sanPhamBHTVjTable = new javax.swing.JTable();
        themSLBHTVjButton = new javax.swing.JButton();
        ngayMuaBHtvjLabel = new javax.swing.JLabel();
        maNhanVienBHTVjTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        banHangKTVjTable = new javax.swing.JTable();
        maDonHangBHKTVjLabel = new javax.swing.JLabel();
        hoTenBHKTVjLabel = new javax.swing.JLabel();
        themBHKTVjButton = new javax.swing.JButton();
        huyBHKTVjButton = new javax.swing.JButton();
        nhapBHKTVjButton = new javax.swing.JButton();
        maDonHangBHKTVjTextField = new javax.swing.JTextField();
        hoTenBHKTVjTextField = new javax.swing.JTextField();
        soDienThoaiBHKTVjLabel = new javax.swing.JLabel();
        soLuongBHktvjLabel = new javax.swing.JLabel();
        soDienThoaiBHKTVjTextField = new javax.swing.JTextField();
        soLuongBHKTVjTextField = new javax.swing.JTextField();
        maSanPhamBHKTVjLabel = new javax.swing.JLabel();
        maSanPhamBHKTVjComboBox = new javax.swing.JComboBox<>();
        maNhanVienBHKTVjLabel = new javax.swing.JLabel();
        maNhanVienBHKTVjTextField = new javax.swing.JTextField();
        diaChiBHKTVjLabel = new javax.swing.JLabel();
        diaChiBHKTVjTextField = new javax.swing.JTextField();
        suaBHKTVjButton = new javax.swing.JButton();
        xuatBHKTVjButton = new javax.swing.JButton();
        xoaBHKTVjButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        sanPhamBHKTVjTable = new javax.swing.JTable();
        themSLBHKTVjButton = new javax.swing.JButton();
        ngayMuaBHtvjLabel1 = new javax.swing.JLabel();
        ngayMuaBHKTVjTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BÁN HÀNG");

        banhangTVjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã đơn hàng", "Mã khách hàng", "Tên khách hàng", "Mã sản phẩm", "Tên sản phẩm", "Đơn giá", "Số lượng", "Thành tiền", "Ngày mua", "Mã nhân viên"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        banhangTVjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                banhangTVjTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(banhangTVjTable);
        if (banhangTVjTable.getColumnModel().getColumnCount() > 0) {
            banhangTVjTable.getColumnModel().getColumn(0).setResizable(false);
            banhangTVjTable.getColumnModel().getColumn(1).setResizable(false);
            banhangTVjTable.getColumnModel().getColumn(2).setResizable(false);
            banhangTVjTable.getColumnModel().getColumn(3).setResizable(false);
            banhangTVjTable.getColumnModel().getColumn(4).setResizable(false);
            banhangTVjTable.getColumnModel().getColumn(5).setResizable(false);
            banhangTVjTable.getColumnModel().getColumn(6).setResizable(false);
            banhangTVjTable.getColumnModel().getColumn(7).setResizable(false);
            banhangTVjTable.getColumnModel().getColumn(8).setResizable(false);
            banhangTVjTable.getColumnModel().getColumn(9).setResizable(false);
        }

        maDonHangBHtvjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        maDonHangBHtvjLabel.setForeground(new java.awt.Color(0, 102, 102));
        maDonHangBHtvjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/business-card-of-folded-diptych-design.png"))); // NOI18N
        maDonHangBHtvjLabel.setText("Mã đơn hàng");

        maSanPhamBHtvjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        maSanPhamBHtvjLabel.setForeground(new java.awt.Color(0, 102, 102));
        maSanPhamBHtvjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/business-card-of-folded-diptych-design.png"))); // NOI18N
        maSanPhamBHtvjLabel.setText("Mã sản phẩm");

        maSanPhamBHtvjComboBox.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        maSanPhamBHtvjComboBox.setForeground(new java.awt.Color(0, 102, 102));
        maSanPhamBHtvjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maSanPhamBHtvjComboBoxActionPerformed(evt);
            }
        });

        xuatBHtvjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        xuatBHtvjButton.setForeground(new java.awt.Color(0, 102, 102));
        xuatBHtvjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/sharebh.png"))); // NOI18N
        xuatBHtvjButton.setText("XUẤT");

        maKhachHangBHtvjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        maKhachHangBHtvjLabel.setForeground(new java.awt.Color(0, 102, 102));
        maKhachHangBHtvjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/id-card.png"))); // NOI18N
        maKhachHangBHtvjLabel.setText("Mã khách hàng");

        nhapBHtvjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        nhapBHtvjButton.setForeground(new java.awt.Color(0, 102, 102));
        nhapBHtvjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/import bh.png"))); // NOI18N
        nhapBHtvjButton.setText("NHẬP");

        suaBHtvjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        suaBHtvjButton.setForeground(new java.awt.Color(0, 102, 102));
        suaBHtvjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/edit bh.png"))); // NOI18N
        suaBHtvjButton.setText("SỬA");
        suaBHtvjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suaBHtvjButtonActionPerformed(evt);
            }
        });

        ngayMuaBHTVjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngayMuaBHTVjTextFieldActionPerformed(evt);
            }
        });

        soLuongBHtvjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        soLuongBHtvjLabel.setForeground(new java.awt.Color(0, 102, 102));
        soLuongBHtvjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/stats.png"))); // NOI18N
        soLuongBHtvjLabel.setText("Số lượng");

        soLuongBHtvjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soLuongBHtvjTextFieldActionPerformed(evt);
            }
        });

        maNhanVienBHtvjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        maNhanVienBHtvjLabel.setForeground(new java.awt.Color(0, 102, 102));
        maNhanVienBHtvjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/employee.png"))); // NOI18N
        maNhanVienBHtvjLabel.setText("Mã nhân viên");

        maDonHangBHtvjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maDonHangBHtvjTextFieldActionPerformed(evt);
            }
        });

        huyBHtvjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        huyBHtvjButton.setForeground(new java.awt.Color(0, 102, 102));
        huyBHtvjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/x-buttonbh.png"))); // NOI18N
        huyBHtvjButton.setText("HỦY");
        huyBHtvjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                huyBHtvjButtonActionPerformed(evt);
            }
        });

        themBHtvjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        themBHtvjButton.setForeground(new java.awt.Color(0, 102, 102));
        themBHtvjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/plusbh.png"))); // NOI18N
        themBHtvjButton.setText("THÊM");
        themBHtvjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themBHtvjButtonActionPerformed(evt);
            }
        });

        xoaBHtvjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        xoaBHtvjButton.setForeground(new java.awt.Color(0, 102, 102));
        xoaBHtvjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/databasebh.png"))); // NOI18N
        xoaBHtvjButton.setText("XÓA");
        xoaBHtvjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xoaBHtvjButtonActionPerformed(evt);
            }
        });

        sanPhamBHTVjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Đơn giá", "Thành tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sanPhamBHTVjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sanPhamBHTVjTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(sanPhamBHTVjTable);
        if (sanPhamBHTVjTable.getColumnModel().getColumnCount() > 0) {
            sanPhamBHTVjTable.getColumnModel().getColumn(0).setResizable(false);
            sanPhamBHTVjTable.getColumnModel().getColumn(1).setResizable(false);
            sanPhamBHTVjTable.getColumnModel().getColumn(2).setResizable(false);
            sanPhamBHTVjTable.getColumnModel().getColumn(3).setResizable(false);
            sanPhamBHTVjTable.getColumnModel().getColumn(4).setResizable(false);
            sanPhamBHTVjTable.getColumnModel().getColumn(5).setResizable(false);
        }

        themSLBHTVjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/plusbh.png"))); // NOI18N
        themSLBHTVjButton.setText("THÊM SẢN PHẨM");
        themSLBHTVjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themSLBHTVjButtonActionPerformed(evt);
            }
        });

        ngayMuaBHtvjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ngayMuaBHtvjLabel.setForeground(new java.awt.Color(0, 102, 102));
        ngayMuaBHtvjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/weekly-calendar.png"))); // NOI18N
        ngayMuaBHtvjLabel.setText("Ngày mua");

        maNhanVienBHTVjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maNhanVienBHTVjTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(maSanPhamBHtvjLabel)
                        .addGap(78, 78, 78)
                        .addComponent(maSanPhamBHtvjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maDonHangBHtvjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maKhachHangBHtvjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(maDonHangBHtvjTextField)
                            .addComponent(maKhachHangBHTVjComboBox, 0, 287, Short.MAX_VALUE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(soLuongBHtvjLabel)
                        .addGap(83, 83, 83)
                        .addComponent(soLuongBHtvjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118)
                        .addComponent(themSLBHTVjButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(themBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(suaBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(xoaBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(huyBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(nhapBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(maNhanVienBHtvjLabel)
                                    .addComponent(ngayMuaBHtvjLabel))
                                .addGap(92, 92, 92)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(maNhanVienBHTVjTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                                    .addComponent(ngayMuaBHTVjTextField))
                                .addGap(0, 0, Short.MAX_VALUE))))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(xuatBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1378, Short.MAX_VALUE)
                        .addComponent(jScrollPane3)))
                .addGap(401, 401, 401))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(soLuongBHtvjLabel)
                    .addComponent(soLuongBHtvjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maSanPhamBHtvjLabel)
                    .addComponent(maSanPhamBHtvjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(themSLBHTVjButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maDonHangBHtvjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maDonHangBHtvjLabel))
                        .addGap(150, 150, 150))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(maNhanVienBHtvjLabel)
                            .addComponent(maNhanVienBHTVjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ngayMuaBHtvjLabel)
                                .addComponent(maKhachHangBHtvjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(maKhachHangBHTVjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ngayMuaBHTVjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(themBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(suaBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(xoaBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(huyBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nhapBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(xuatBHtvjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("THÀNH VIÊN", jPanel1);

        banHangKTVjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã đơn hàng", "Tên khách hàng", "Địa chỉ", "Số điện thoại", "Mã sản phẩm", "Tên sản phẩm", "Đơn giá", "Số lượng", "Thành tiền", "Ngày mua", "Mã nhân viên"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        banHangKTVjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                banHangKTVjTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(banHangKTVjTable);
        if (banHangKTVjTable.getColumnModel().getColumnCount() > 0) {
            banHangKTVjTable.getColumnModel().getColumn(0).setResizable(false);
            banHangKTVjTable.getColumnModel().getColumn(1).setResizable(false);
            banHangKTVjTable.getColumnModel().getColumn(2).setResizable(false);
            banHangKTVjTable.getColumnModel().getColumn(3).setResizable(false);
            banHangKTVjTable.getColumnModel().getColumn(4).setResizable(false);
            banHangKTVjTable.getColumnModel().getColumn(5).setResizable(false);
            banHangKTVjTable.getColumnModel().getColumn(6).setResizable(false);
            banHangKTVjTable.getColumnModel().getColumn(7).setResizable(false);
            banHangKTVjTable.getColumnModel().getColumn(9).setResizable(false);
            banHangKTVjTable.getColumnModel().getColumn(10).setResizable(false);
        }

        maDonHangBHKTVjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        maDonHangBHKTVjLabel.setForeground(new java.awt.Color(0, 102, 102));
        maDonHangBHKTVjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/business-card-of-folded-diptych-design.png"))); // NOI18N
        maDonHangBHKTVjLabel.setText("Mã đơn hàng");

        hoTenBHKTVjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        hoTenBHKTVjLabel.setForeground(new java.awt.Color(0, 102, 102));
        hoTenBHKTVjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/dog-tag.png"))); // NOI18N
        hoTenBHKTVjLabel.setText("Họ tên");

        themBHKTVjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        themBHKTVjButton.setForeground(new java.awt.Color(0, 102, 102));
        themBHKTVjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/plus.png"))); // NOI18N
        themBHKTVjButton.setText("THÊM");
        themBHKTVjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themBHKTVjButtonActionPerformed(evt);
            }
        });

        huyBHKTVjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        huyBHKTVjButton.setForeground(new java.awt.Color(0, 102, 102));
        huyBHKTVjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/x-button.png"))); // NOI18N
        huyBHKTVjButton.setText("HỦY");
        huyBHKTVjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                huyBHKTVjButtonActionPerformed(evt);
            }
        });

        nhapBHKTVjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        nhapBHKTVjButton.setForeground(new java.awt.Color(0, 102, 102));
        nhapBHKTVjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/import (1).png"))); // NOI18N
        nhapBHKTVjButton.setText("NHẬP");
        nhapBHKTVjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nhapBHKTVjButtonActionPerformed(evt);
            }
        });

        soDienThoaiBHKTVjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        soDienThoaiBHKTVjLabel.setForeground(new java.awt.Color(0, 102, 102));
        soDienThoaiBHKTVjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/agenda.png"))); // NOI18N
        soDienThoaiBHKTVjLabel.setText("Số điện thoại");

        soLuongBHktvjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        soLuongBHktvjLabel.setForeground(new java.awt.Color(0, 102, 102));
        soLuongBHktvjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/stats.png"))); // NOI18N
        soLuongBHktvjLabel.setText("Số lượng");

        soLuongBHKTVjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soLuongBHKTVjTextFieldActionPerformed(evt);
            }
        });

        maSanPhamBHKTVjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        maSanPhamBHKTVjLabel.setForeground(new java.awt.Color(0, 102, 102));
        maSanPhamBHKTVjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/business-card-of-folded-diptych-design.png"))); // NOI18N
        maSanPhamBHKTVjLabel.setText("Mã sản phẩm");

        maSanPhamBHKTVjComboBox.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        maSanPhamBHKTVjComboBox.setForeground(new java.awt.Color(0, 102, 102));
        maSanPhamBHKTVjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maSanPhamBHKTVjComboBoxActionPerformed(evt);
            }
        });

        maNhanVienBHKTVjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        maNhanVienBHKTVjLabel.setForeground(new java.awt.Color(0, 102, 102));
        maNhanVienBHKTVjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/employee.png"))); // NOI18N
        maNhanVienBHKTVjLabel.setText("Mã nhân viên");

        diaChiBHKTVjLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        diaChiBHKTVjLabel.setForeground(new java.awt.Color(0, 102, 102));
        diaChiBHKTVjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/notebook.png"))); // NOI18N
        diaChiBHKTVjLabel.setText("Địa chỉ");

        suaBHKTVjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        suaBHKTVjButton.setForeground(new java.awt.Color(0, 102, 102));
        suaBHKTVjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/edit (1).png"))); // NOI18N
        suaBHKTVjButton.setText("SỬA");
        suaBHKTVjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suaBHKTVjButtonActionPerformed(evt);
            }
        });

        xuatBHKTVjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        xuatBHKTVjButton.setForeground(new java.awt.Color(0, 102, 102));
        xuatBHKTVjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/share.png"))); // NOI18N
        xuatBHKTVjButton.setText("XUẤT");

        xoaBHKTVjButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        xoaBHKTVjButton.setForeground(new java.awt.Color(0, 102, 102));
        xoaBHKTVjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/database.png"))); // NOI18N
        xoaBHKTVjButton.setText("XÓA");
        xoaBHKTVjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xoaBHKTVjButtonActionPerformed(evt);
            }
        });

        sanPhamBHKTVjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã sản phẩm", "Tên sản phẩm", "Đơn giá", "Số lượng", "Thành tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sanPhamBHKTVjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sanPhamBHKTVjTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(sanPhamBHKTVjTable);
        if (sanPhamBHKTVjTable.getColumnModel().getColumnCount() > 0) {
            sanPhamBHKTVjTable.getColumnModel().getColumn(0).setResizable(false);
            sanPhamBHKTVjTable.getColumnModel().getColumn(1).setResizable(false);
            sanPhamBHKTVjTable.getColumnModel().getColumn(2).setResizable(false);
            sanPhamBHKTVjTable.getColumnModel().getColumn(3).setResizable(false);
            sanPhamBHKTVjTable.getColumnModel().getColumn(4).setResizable(false);
            sanPhamBHKTVjTable.getColumnModel().getColumn(5).setResizable(false);
        }

        themSLBHKTVjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/plusbh.png"))); // NOI18N
        themSLBHKTVjButton.setText("THÊM SẢN PHẨM");
        themSLBHKTVjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themSLBHKTVjButtonActionPerformed(evt);
            }
        });

        ngayMuaBHtvjLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ngayMuaBHtvjLabel1.setForeground(new java.awt.Color(0, 102, 102));
        ngayMuaBHtvjLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlbh/images/weekly-calendar.png"))); // NOI18N
        ngayMuaBHtvjLabel1.setText("Ngày mua");

        ngayMuaBHKTVjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngayMuaBHKTVjTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("*");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("*");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("* Các trường có dấu sao là bắt buộc");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(maSanPhamBHKTVjLabel)
                .addGap(18, 18, 18)
                .addComponent(maSanPhamBHKTVjComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(106, 106, 106)
                .addComponent(soLuongBHktvjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(soLuongBHKTVjTextField)
                .addGap(158, 158, 158)
                .addComponent(themSLBHKTVjButton)
                .addGap(409, 409, 409))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1239, 1239, 1239)
                        .addComponent(xuatBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(308, 308, 308))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(themBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(maDonHangBHKTVjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(maDonHangBHKTVjTextField))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(soDienThoaiBHKTVjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(soDienThoaiBHKTVjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(maNhanVienBHKTVjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(46, 46, 46)
                                        .addComponent(hoTenBHKTVjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(maNhanVienBHKTVjTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                    .addComponent(hoTenBHKTVjTextField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(diaChiBHKTVjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ngayMuaBHtvjLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(diaChiBHKTVjTextField)
                                    .addComponent(ngayMuaBHKTVjTextField)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(suaBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(xoaBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(huyBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nhapBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(305, 305, 305))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maSanPhamBHKTVjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maSanPhamBHKTVjLabel)
                    .addComponent(soLuongBHktvjLabel)
                    .addComponent(soLuongBHKTVjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(themSLBHKTVjButton))
                .addGap(14, 14, 14)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maDonHangBHKTVjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maDonHangBHKTVjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diaChiBHKTVjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hoTenBHKTVjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hoTenBHKTVjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diaChiBHKTVjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(soDienThoaiBHKTVjLabel)
                        .addComponent(soDienThoaiBHKTVjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(maNhanVienBHKTVjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maNhanVienBHKTVjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ngayMuaBHtvjLabel1)
                        .addComponent(ngayMuaBHKTVjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(themBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(suaBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xoaBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(huyBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nhapBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(xuatBHKTVjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("KHÔNG THÀNH VIÊN", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1402, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 855, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void loadMaKhachHang(String maKH) {
        if (maKH.equals("")) {
            maKhachHangBHTVjComboBox.addItem("");
        }

        listKhachHang = KhachHangDAO.getListKhachHang();
        for (int i = 0; i < listKhachHang.size(); i++) {

            if (listKhachHang.get(i).getMaKhachHang().equals(maKH)) {
            } else {
                maKhachHangBHTVjComboBox.addItem(listKhachHang.get(i).getMaKhachHang());
            }

        }
    }

    public void loadMaSanPham() {
        listSanPham = SanPhamDAO.getListSanPham();
        maSanPhamBHtvjComboBox.addItem("");
        for (int i = 0; i < listSanPham.size(); i++) {
            maSanPhamBHtvjComboBox.addItem(listSanPham.get(i).getMaSanPham());
        }
    }

    public void loadBanHang() {
        listHoaDon = HoaDonDAO.getListHoaDon();
        for (int i = 0; i < listHoaDon.size(); i++) {
            if (!(listHoaDon.get(i).getMaKhachHangMua() == null)) {
                KhachHang khachHang = KhachHangDAO.getMotKhachHang(listHoaDon.get(i).getMaKhachHangMua());
                ArrayList<ChiTietHoaDon> listChiTietMotHoaDon = ChiTietHoaDonDAO.getMotChiTietHoaDon(listHoaDon.get(i).getMaHoaDon());
                for (int j = 0; j < listChiTietMotHoaDon.size(); j++) {
                    SanPham sanPham = SanPhamDAO.getMotSanPham(listChiTietMotHoaDon.get(j).getMaSanPhamMua());
                    thanhVienDefaultTableModel.addRow(new Object[]{
                        listHoaDon.get(i).getMaHoaDon(),
                        khachHang.getMaKhachHang(),
                        khachHang.getTenKhachHang(),
                        listChiTietMotHoaDon.get(j).getMaSanPhamMua(),
                        sanPham.getTenSanPham(),
                        format.format(listChiTietMotHoaDon.get(j).getGiaSanPhamMua()),
                        listChiTietMotHoaDon.get(j).getSoLuongMua(),
                        format.format(listChiTietMotHoaDon.get(j).tinhTien()),
                        listHoaDon.get(i).getNgayMua(),
                        listHoaDon.get(i).getMaNhanVienBan()
                    });

                }
            } else {
                ArrayList<ChiTietHoaDon> listChiTietMotHoaDon = ChiTietHoaDonDAO.getMotChiTietHoaDon(listHoaDon.get(i).getMaHoaDon());
                for (int j = 0; j < listChiTietMotHoaDon.size(); j++) {
                    SanPham sanPham = SanPhamDAO.getMotSanPham(listChiTietMotHoaDon.get(j).getMaSanPhamMua());
                    koThanhVienDefaultTableModel.addRow(new Object[]{
                        listHoaDon.get(i).getMaHoaDon(),
                        listHoaDon.get(i).getTenKhachHangMua(),
                        listHoaDon.get(i).getDiaChiKhachHangMua(),
                        listHoaDon.get(i).getSoDienThoaiKH(),
                        listChiTietMotHoaDon.get(j).getMaSanPhamMua(),
                        sanPham.getTenSanPham(),
                        format.format(listChiTietMotHoaDon.get(j).getGiaSanPhamMua()),
                        listChiTietMotHoaDon.get(j).getSoLuongMua(),
                        format.format(listChiTietMotHoaDon.get(j).tinhTien()),
                        listHoaDon.get(i).getNgayMua(),
                        listHoaDon.get(i).getMaNhanVienBan()
                    });

                }
            }

        }
    }

    public void loadMaSanPhamBHKTV() {
        maSanPhamBHKTVjComboBox.addItem("");
        for (int i = 0; i < listSanPham.size(); i++) {
            maSanPhamBHKTVjComboBox.addItem(listSanPham.get(i).getMaSanPham());
        }
    }


    private void soLuongBHKTVjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soLuongBHKTVjTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_soLuongBHKTVjTextFieldActionPerformed

    private void maSanPhamBHKTVjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maSanPhamBHKTVjComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maSanPhamBHKTVjComboBoxActionPerformed

    private void maDonHangBHtvjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maDonHangBHtvjTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maDonHangBHtvjTextFieldActionPerformed

    private void soLuongBHtvjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soLuongBHtvjTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_soLuongBHtvjTextFieldActionPerformed

    private void ngayMuaBHTVjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngayMuaBHTVjTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ngayMuaBHTVjTextFieldActionPerformed

    private void maSanPhamBHtvjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maSanPhamBHtvjComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maSanPhamBHtvjComboBoxActionPerformed

    private void nhapBHKTVjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nhapBHKTVjButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nhapBHKTVjButtonActionPerformed

    private void themBHtvjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themBHtvjButtonActionPerformed
        // TODO add your handling code here:
        try {

            int count = sanPhamThanhVienDefaultTableModel.getRowCount();
            if (count == 0) {
                JOptionPane.showMessageDialog(null, "Vui lòng thêm sản phẩm", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

            } else {
                String maKhachHang = maKhachHangBHTVjComboBox.getSelectedItem().toString();
                String maNhanVien = maNhanVienBHTVjTextField.getText();
                long maHoaDon = new Date().getTime();

                if (maKhachHang.equals("")) {
                    JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                } else {
                    HoaDon hoaDon = new HoaDon();
                    hoaDon.setMaHoaDon(maHoaDon);
                    hoaDon.setMaKhachHangMua(maKhachHang);
                    KhachHang khachHang = KhachHangDAO.getMotKhachHang(maKhachHang);
                    hoaDon.setNgayMua(new Timestamp(new Date().getTime()));
                    hoaDon.setMaNhanVienBan(maNhanVien);
                    if (HoaDonDAO.themHoaDon(hoaDon)) {
                        ArrayList<SanPham> listSanPhamMua = new ArrayList<>();
                        for (int i = 0; i < sanPhamThanhVienDefaultTableModel.getRowCount(); i++) {
                            SanPham sanPhamMua = new SanPham();
                            sanPhamMua.setMaSanPham(sanPhamThanhVienDefaultTableModel.getValueAt(i, 1).toString());
                            sanPhamMua.setTenSanPham(sanPhamThanhVienDefaultTableModel.getValueAt(i, 2).toString());
                            sanPhamMua.setSoLuong(Integer.parseInt(sanPhamThanhVienDefaultTableModel.getValueAt(i, 3).toString()));
                            sanPhamMua.setDonGia(Double.parseDouble(sanPhamThanhVienDefaultTableModel.getValueAt(i, 4).toString()));
                            listSanPhamMua.add(sanPhamMua);
                        }
                        ArrayList<ChiTietHoaDon> listChiTietHoaDon = new ArrayList<>();
                        for (int i = 0; i < listSanPhamMua.size(); i++) {
                            ChiTietHoaDon chiTietHoaDon = new ChiTietHoaDon();
                            chiTietHoaDon.setMaHoaDonChiTiet(maHoaDon);
                            chiTietHoaDon.setMaSanPhamMua(listSanPhamMua.get(i).getMaSanPham());
                            chiTietHoaDon.setSoLuongMua(listSanPhamMua.get(i).getSoLuong());
                            SanPham sanPham = SanPhamDAO.getMotSanPham(listSanPhamMua.get(i).getMaSanPham());
                            chiTietHoaDon.setGiaSanPhamMua(listSanPhamMua.get(i).getDonGia());
                            ChiTietHoaDonDAO.themChiTietHoaDon(chiTietHoaDon);
                            SanPham sanPhamCapNhapSoLuong = SanPhamDAO.getMotSanPham(listSanPhamMua.get(i).getMaSanPham());
                            SanPhamDAO.capNhapSoLuongSanPham(listSanPhamMua.get(i).getMaSanPham(), sanPhamCapNhapSoLuong.getSoLuong() - listSanPhamMua.get(i).getSoLuong());
                            listChiTietHoaDon.add(chiTietHoaDon);
                            // thêm db xong phải thêm vô cột
                            thanhVienDefaultTableModel.addRow(new Object[]{
                                maHoaDon,
                                maKhachHang,
                                khachHang.getTenKhachHang(),
                                chiTietHoaDon.getMaSanPhamMua(),
                                sanPham.getTenSanPham(),
                                format.format(chiTietHoaDon.getGiaSanPhamMua()),
                                chiTietHoaDon.getSoLuongMua(),
                                format.format(chiTietHoaDon.tinhTien()),
                                hoaDon.getNgayMua(),
                                hoaDon.getMaNhanVienBan()
                            });

                        }

                        JOptionPane.showMessageDialog(null, "Đã thêm", "Message", JOptionPane.INFORMATION_MESSAGE, dung);
                    }

                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kiểm tra giá trị nhập vào", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
        }
        sanPhamThanhVienDefaultTableModel.setRowCount(0);
        maKhachHangBHTVjComboBox.removeAllItems();
        loadMaKhachHang("");
    }//GEN-LAST:event_themBHtvjButtonActionPerformed

    private void maNhanVienBHTVjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maNhanVienBHTVjTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maNhanVienBHTVjTextFieldActionPerformed

    public boolean kiemTraTrungLapMaSanPham(DefaultTableModel tableModel, JTable jTable, String maSanPhamKiemTra) {
        tableModel = (DefaultTableModel) jTable.getModel();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            if (tableModel.getValueAt(i, 1).toString().equals(maSanPhamKiemTra)) {
                return true;
            }
        }
        return false;
    }


    private void themSLBHTVjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themSLBHTVjButtonActionPerformed
        // TODO add your handling code here:
        try {

            int kiemTra = banhangTVjTable.getSelectedRow();
            if (kiemTra != -1) { // thêm sản phẩm mới khi hóa đơn đã tồn tại
                String maSanPham = maSanPhamBHtvjComboBox.getSelectedItem().toString();
                int soLuong = Integer.parseInt(soLuongBHtvjTextField.getText());
                if (maSanPham.equals("") || String.valueOf(soLuong).equals("")) {
                    JOptionPane.showMessageDialog(null, "Vui lòng điền đầy đủ thông tin!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                } else {
                    if (kiemTraTrungLapMaSanPham(sanPhamThanhVienDefaultTableModel, sanPhamBHTVjTable, maSanPham)) {
                        JOptionPane.showMessageDialog(null, "Trùng lặp mã sản phẩm, vui lòng nhập lại!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                        sanPhamThanhVienDefaultTableModel.setRowCount(0);
                    } else {
                        if (SanPhamDAO.kiemTraDuSoLuong(maSanPham, soLuong)) {
                            SanPham sanPham = SanPhamDAO.getMotSanPham(maSanPham);
                            maSanPhamBHtvjComboBox.removeAllItems();
                            loadMaSanPham();
                            soLuongBHtvjTextField.setText("");
                            sanPhamThanhVienDefaultTableModel.addRow(new Object[]{
                                sanPhamThanhVienDefaultTableModel.getRowCount() + 1, maSanPham, sanPham.getTenSanPham(), soLuong, format.format(sanPham.getDonGia()), format.format(sanPham.getDonGia() * soLuong)
                            });
                            long maHoaDon = Long.parseLong(maDonHangBHtvjTextField.getText());
                            ChiTietHoaDon chiTietHoaDon = new ChiTietHoaDon();
                            chiTietHoaDon.setMaHoaDonChiTiet(maHoaDon);
                            chiTietHoaDon.setMaSanPhamMua(maSanPham);
                            chiTietHoaDon.setGiaSanPhamMua(sanPham.getDonGia());
                            chiTietHoaDon.setSoLuongMua(soLuong);
                            if (ChiTietHoaDonDAO.themChiTietHoaDon(chiTietHoaDon)) {
                                SanPhamDAO.capNhapSoLuongSanPham(maSanPham, sanPham.getSoLuong() - soLuong);
                                thanhVienDefaultTableModel.setRowCount(0);
                                loadBanHang();
                                JOptionPane.showMessageDialog(null, "Đã thêm sản phẩm!", "Message", JOptionPane.INFORMATION_MESSAGE, dung);
                                setMacDinhBHTV();
                            } else {
                                JOptionPane.showMessageDialog(null, "Có lỗi xảy ra, thử lại sau!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Sản phẩm không đủ số lượng!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

                        }
                    }
                }
            } else {
                String maSanPham = maSanPhamBHtvjComboBox.getSelectedItem().toString();
                int soLuong = Integer.parseInt(soLuongBHtvjTextField.getText());
                if (maSanPham.equals("") || String.valueOf(soLuong).equals("")) {
                    JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                } else {
                    if (kiemTraTrungLapMaSanPham(sanPhamThanhVienDefaultTableModel, sanPhamBHTVjTable, maSanPham)) {
                        JOptionPane.showMessageDialog(null, "Trùng lặp mã sản phẩm, vui lòng nhập lại!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                        sanPhamThanhVienDefaultTableModel.setRowCount(0);
                    } else {
                        if (SanPhamDAO.kiemTraDuSoLuong(maSanPham, soLuong)) {
                            SanPham sanPham = SanPhamDAO.getMotSanPham(maSanPham);
                            maSanPhamBHtvjComboBox.removeAllItems();
                            loadMaSanPham();
                            soLuongBHtvjTextField.setText("");
                            sanPhamThanhVienDefaultTableModel.addRow(new Object[]{
                                sanPhamThanhVienDefaultTableModel.getRowCount() + 1, maSanPham, sanPham.getTenSanPham(), soLuong, format.format(sanPham.getDonGia()), format.format(sanPham.getDonGia() * soLuong)
                            });
                        } else {
                            JOptionPane.showMessageDialog(null, "Sản phẩm không đủ số lượng!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

                        }
                    }
                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kiểm tra giá trị nhập vào", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

        }
    }//GEN-LAST:event_themSLBHTVjButtonActionPerformed

    private void banhangTVjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_banhangTVjTableMouseClicked
        // TODO add your handling code here:
        try {
            huyBHtvjButton.setEnabled(true);
            themBHtvjButton.setEnabled(false);
            sanPhamThanhVienDefaultTableModel.setRowCount(0);
            int row = banhangTVjTable.getSelectedRow();
            maDonHangBHtvjTextField.setText(thanhVienDefaultTableModel.getValueAt(row, 0).toString());
            maDonHangBHtvjTextField.setEditable(false);
            ngayMuaBHTVjTextField.setText(thanhVienDefaultTableModel.getValueAt(row, 8).toString());
            ngayMuaBHTVjTextField.setEditable(false);
            soLuongBHtvjTextField.setText(thanhVienDefaultTableModel.getValueAt(row, 6).toString());
            maKhachHangBHTVjComboBox.removeAllItems();
            maKhachHangBHTVjComboBox.addItem(thanhVienDefaultTableModel.getValueAt(row, 1).toString());
            loadMaKhachHang(thanhVienDefaultTableModel.getValueAt(row, 1).toString());

            maSanPhamBHtvjComboBox.removeAllItems();
            maSanPhamBHtvjComboBox.addItem(thanhVienDefaultTableModel.getValueAt(row, 3).toString());
            ArrayList<ChiTietHoaDon> listChiTietHoaDon = ChiTietHoaDonDAO.getMotChiTietHoaDon(Long.parseLong(thanhVienDefaultTableModel.getValueAt(row, 0).toString()));
            for (int i = 0; i < listChiTietHoaDon.size(); i++) {
                SanPham sanPham = SanPhamDAO.getMotSanPham(listChiTietHoaDon.get(i).getMaSanPhamMua());
                sanPhamThanhVienDefaultTableModel.addRow(new Object[]{
                    i + 1,
                    listChiTietHoaDon.get(i).getMaSanPhamMua(),
                    sanPham.getTenSanPham(),
                    listChiTietHoaDon.get(i).getSoLuongMua(),
                    format.format(listChiTietHoaDon.get(i).getGiaSanPhamMua()),
                    format.format(listChiTietHoaDon.get(i).tinhTien()),});
            }

            listSanPham = SanPhamDAO.getListSanPham();
            for (int i = 0; i < listSanPham.size(); i++) {
                if (listSanPham.get(i).getMaSanPham().equals(thanhVienDefaultTableModel.getValueAt(row, 3).toString())) {
                } else {
                    maSanPhamBHtvjComboBox.addItem(listSanPham.get(i).getMaSanPham());

                }
            }

        } catch (Exception e) {
        }
    }//GEN-LAST:event_banhangTVjTableMouseClicked

    private void sanPhamBHTVjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sanPhamBHTVjTableMouseClicked
        // TODO add your handling code here:
        try {
            int row = sanPhamBHTVjTable.getSelectedRow();
            maSanPhamBHtvjComboBox.removeAllItems();
            maSanPhamBHtvjComboBox.addItem(sanPhamThanhVienDefaultTableModel.getValueAt(row, 1).toString());
            listSanPham = SanPhamDAO.getListSanPham();
            for (int i = 0; i < listSanPham.size(); i++) {
                if (listSanPham.get(i).getMaSanPham().equals(thanhVienDefaultTableModel.getValueAt(row, 3).toString())) {
                } else {
                    maSanPhamBHtvjComboBox.addItem(listSanPham.get(i).getMaSanPham());

                }
            }
            soLuongBHtvjTextField.setText(sanPhamThanhVienDefaultTableModel.getValueAt(row, 3).toString());
        } catch (Exception e) {
        }
    }//GEN-LAST:event_sanPhamBHTVjTableMouseClicked

    private void suaBHtvjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suaBHtvjButtonActionPerformed
        // TODO add your handling code here:
        try {
            int row = banhangTVjTable.getSelectedRow();
            if (row != -1) {
                long maHoaDon = Long.parseLong(maDonHangBHtvjTextField.getText());
                Timestamp ngayMua = Timestamp.valueOf(thanhVienDefaultTableModel.getValueAt(row, 8).toString());
                int soLuongMoi = Integer.parseInt(soLuongBHtvjTextField.getText());
                int soLuongCu = Integer.parseInt(thanhVienDefaultTableModel.getValueAt(row, 6).toString());
                String maSanPhamMoi = maSanPhamBHtvjComboBox.getSelectedItem().toString();
                String maSanPhamCu = thanhVienDefaultTableModel.getValueAt(row, 3).toString();
                String maKhachHangCu = thanhVienDefaultTableModel.getValueAt(row, 1).toString();
                String maKhachHangMoi = maKhachHangBHTVjComboBox.getSelectedItem().toString();
                HoaDon hoaDon = new HoaDon();
                if (maSanPhamCu.equals(maSanPhamMoi)) {

                    if (soLuongMoi > soLuongCu) {
                        int chenhLech = soLuongMoi - soLuongCu;
                        if (SanPhamDAO.kiemTraDuSoLuong(maSanPhamMoi, soLuongMoi)) {
                            SanPham sanPham = SanPhamDAO.getMotSanPham(maSanPhamCu);
                            SanPhamDAO.capNhapSoLuongSanPham(maSanPhamMoi, sanPham.getSoLuong() - chenhLech);

                        } else {
                            JOptionPane.showMessageDialog(null, "Sản phẩm không còn đủ số lượng", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                        }
                    } else if (soLuongMoi < soLuongCu) {
                        int chenhLech = soLuongCu - soLuongMoi;
                        SanPham sanPham = SanPhamDAO.getMotSanPham(maSanPhamCu);
                        SanPhamDAO.capNhapSoLuongSanPham(maSanPhamMoi, sanPham.getSoLuong() + chenhLech);
                    } else {
                        JOptionPane.showMessageDialog(null, "Mã sản phẩm và số lượng không có gì thay đổi", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

                    }
                    ChiTietHoaDon chiTietHoaDon = new ChiTietHoaDon();
                    chiTietHoaDon.setMaHoaDonChiTiet(maHoaDon);
                    chiTietHoaDon.setMaSanPhamMua(maSanPhamMoi);
                    SanPham sanPham = SanPhamDAO.getMotSanPham(maSanPhamMoi);
                    chiTietHoaDon.setGiaSanPhamMua(sanPham.getDonGia());
                    chiTietHoaDon.setSoLuongMua(soLuongMoi);
                    ChiTietHoaDonDAO.capNhapMotChiTietHoaDon(maHoaDon, chiTietHoaDon, maSanPhamCu);
//                    if (ChiTietHoaDonDAO.capNhapMotChiTietHoaDon(maHoaDon, chiTietHoaDon, maSanPhamCu)) {
//                    }
//                    sanPhamThanhVienDefaultTableModel.setRowCount(0);
//                    ArrayList<ChiTietHoaDon> listchiTietHoaDon = ChiTietHoaDonDAO.getMotChiTietHoaDon(maHoaDon);
//                    for (int i = 0; i < listchiTietHoaDon.size(); i++) {
//                        SanPham sanPham1 = SanPhamDAO.getMotSanPham(maSanPhamMoi);
//                        sanPhamThanhVienDefaultTableModel.addRow(new Object[]{
//                            i + 1,
//                            listchiTietHoaDon.get(i).getMaSanPhamMua(),
//                            sanPham1.getTenSanPham(),
//                            listchiTietHoaDon.get(i).getSoLuongMua(),
//                            listchiTietHoaDon.get(i).getGiaSanPhamMua(),
//                            format.format(listchiTietHoaDon.get(i).getSoLuongMua() * listchiTietHoaDon.get(i).getGiaSanPhamMua())
//
//                        });
//                    }
                    if (!maKhachHangMoi.equals(maKhachHangCu)) {
                        HoaDonDAO.suaKhachHangHoaDon(maKhachHangMoi, maHoaDon);
                        thanhVienDefaultTableModel.setValueAt(maKhachHangMoi, row, 1);
                    }
                    thanhVienDefaultTableModel.setRowCount(0);
                    loadBanHang();
                    JOptionPane.showMessageDialog(null, "Đã sửa", "Message", JOptionPane.INFORMATION_MESSAGE, dung);

                } else {
                    if (kiemTraTrungLapMaSanPham(sanPhamThanhVienDefaultTableModel, sanPhamBHTVjTable, maSanPhamMoi)) {
                        JOptionPane.showMessageDialog(null, "Xảy ra trùng lặp mã sản phẩm", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                    } else {
                        if (SanPhamDAO.kiemTraDuSoLuong(maSanPhamMoi, soLuongMoi)) {
                            SanPham sanPhamCu = SanPhamDAO.getMotSanPham(maSanPhamCu);
                            SanPhamDAO.capNhapSoLuongSanPham(maSanPhamCu, sanPhamCu.getSoLuong() + soLuongCu);
                            SanPham sanPhamMoi = SanPhamDAO.getMotSanPham(maSanPhamMoi);
                            SanPhamDAO.capNhapSoLuongSanPham(maSanPhamMoi, sanPhamMoi.getSoLuong() - soLuongMoi);

                            ChiTietHoaDon chiTietHoaDon = new ChiTietHoaDon();
                            chiTietHoaDon.setMaHoaDonChiTiet(maHoaDon);
                            chiTietHoaDon.setMaSanPhamMua(maSanPhamMoi);
                            chiTietHoaDon.setGiaSanPhamMua(Double.parseDouble(thanhVienDefaultTableModel.getValueAt(row, 5).toString()));
                            chiTietHoaDon.setSoLuongMua(soLuongMoi);
                            ChiTietHoaDonDAO.capNhapMotChiTietHoaDon(maHoaDon, chiTietHoaDon, maSanPhamCu);

//                            sanPhamThanhVienDefaultTableModel.setRowCount(0);
//                            ArrayList<ChiTietHoaDon> listchiTietHoaDon = ChiTietHoaDonDAO.getMotChiTietHoaDon(maHoaDon);
//                            for (int i = 0; i < listchiTietHoaDon.size(); i++) {
//                                SanPham sanPham1 = SanPhamDAO.getMotSanPham(maSanPhamMoi);
//                                sanPhamThanhVienDefaultTableModel.addRow(new Object[]{
//                                    i + 1,
//                                    listchiTietHoaDon.get(i).getMaSanPhamMua(),
//                                    sanPham1.getTenSanPham(),
//                                    listchiTietHoaDon.get(i).getSoLuongMua(),
//                                    listchiTietHoaDon.get(i).getGiaSanPhamMua(),
//                                    format.format(listchiTietHoaDon.get(i).getSoLuongMua() * listchiTietHoaDon.get(i).getGiaSanPhamMua())
//
//                                });
//                            }
                            if (!maKhachHangMoi.equals(maKhachHangCu)) {
                                HoaDonDAO.suaKhachHangHoaDon(maKhachHangMoi, maHoaDon);
                                thanhVienDefaultTableModel.setValueAt(maKhachHangMoi, row, 1);
                            }
                            thanhVienDefaultTableModel.setRowCount(0);
                            loadBanHang();
                            JOptionPane.showMessageDialog(null, "Đã sửa", "Message", JOptionPane.INFORMATION_MESSAGE, dung);

                        } else {
                            JOptionPane.showMessageDialog(null, "Sản phẩm mới không còn đủ số lượng", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                        }
                    }

                }

            } else {
                JOptionPane.showMessageDialog(null, "Chọn một đơn hàng để sửa", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        sanPhamThanhVienDefaultTableModel.setRowCount(0);
        soLuongBHtvjTextField.setText("");
        maSanPhamBHtvjComboBox.removeAllItems();
        maKhachHangBHTVjComboBox.removeAllItems();
        loadMaSanPham();
        maDonHangBHtvjTextField.setText("");
        ngayMuaBHTVjTextField.setText("");
        loadMaKhachHang("");
        huyBHtvjButton.setEnabled(false);
        themBHtvjButton.setEnabled(true);
        themSLBHTVjButton.setEnabled(true);
    }//GEN-LAST:event_suaBHtvjButtonActionPerformed

    private void xoaBHtvjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xoaBHtvjButtonActionPerformed
        // TODO add your handling code here:
        try {
            int row = banhangTVjTable.getSelectedRow();
            if (row != -1) {
                long maHoaDon = Long.parseLong(maDonHangBHtvjTextField.getText());
                int luaChon = JOptionPane.showConfirmDialog(null, "Bạn có chắn chắn muốn xóa không", "Message", JOptionPane.YES_NO_OPTION);
                if (luaChon == JOptionPane.YES_OPTION) {
                    if (HoaDonDAO.xoaHoaDon(maHoaDon)) {
                        thanhVienDefaultTableModel.setRowCount(0);
                        loadBanHang();
                        JOptionPane.showMessageDialog(null, "Đã xóa", "Message", JOptionPane.INFORMATION_MESSAGE, dung);
                    } else {
                        JOptionPane.showMessageDialog(null, "Xãy ra lỗi, vui lòng thử lại sau", "Message", JOptionPane.INFORMATION_MESSAGE, dung);

                    }
                } else if (luaChon == JOptionPane.NO_OPTION) {

                    JOptionPane.showMessageDialog(null, "Đã hủy việc xóa", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Chọn một đơn hàng để xóa", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

            }
        } catch (Exception e) {
        }
        sanPhamThanhVienDefaultTableModel.setRowCount(0);
        soLuongBHtvjTextField.setText("");

        maSanPhamBHtvjComboBox.removeAllItems();
        maKhachHangBHTVjComboBox.removeAllItems();

        loadMaSanPham();
        maDonHangBHtvjTextField.setText("");
        ngayMuaBHTVjTextField.setText("");

        loadMaKhachHang("");
        huyBHtvjButton.setEnabled(false);
        themBHtvjButton.setEnabled(true);
        themSLBHTVjButton.setEnabled(true);


    }//GEN-LAST:event_xoaBHtvjButtonActionPerformed
    
    public void setMacDinhBHTV(){
        sanPhamThanhVienDefaultTableModel.setRowCount(0);
        soLuongBHtvjTextField.setText("");
        maSanPhamBHtvjComboBox.removeAllItems();
        maKhachHangBHTVjComboBox.removeAllItems();
        loadMaSanPham();
        maDonHangBHtvjTextField.setText("");
        ngayMuaBHTVjTextField.setText("");
        loadMaKhachHang("");
        huyBHtvjButton.setEnabled(false);
        themBHtvjButton.setEnabled(true);
        themSLBHTVjButton.setEnabled(true);
        banhangTVjTable.clearSelection();
    }
    
    private void huyBHtvjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_huyBHtvjButtonActionPerformed
        // TODO add your handling code here:
        setMacDinhBHTV();
    }//GEN-LAST:event_huyBHtvjButtonActionPerformed

    private void themSLBHKTVjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themSLBHKTVjButtonActionPerformed
        // TODO add your handling code here:
        try {
            int kiemTra = banHangKTVjTable.getSelectedRow();
            if (kiemTra != -1) {

                String maSanPham = maSanPhamBHKTVjComboBox.getSelectedItem().toString();
                int soLuong = Integer.parseInt(soLuongBHKTVjTextField.getText());
                if (maSanPham.equals("") || String.valueOf(soLuong).equals("")) {
                    JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                } else {
                    if (kiemTraTrungLapMaSanPham(sanPhamKhongThanhVienDefaultTableModel, sanPhamBHKTVjTable, maSanPham)) {
                        JOptionPane.showMessageDialog(null, "Trùng lặp mã sản phẩm, vui lòng nhập lại!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                        sanPhamKhongThanhVienDefaultTableModel.setRowCount(0);
                    } else {
                        if (SanPhamDAO.kiemTraDuSoLuong(maSanPham, soLuong)) {
                            SanPham sanPham = SanPhamDAO.getMotSanPham(maSanPham);
                            maSanPhamBHKTVjComboBox.removeAllItems();
                            loadMaSanPhamBHKTV();
                            soLuongBHKTVjTextField.setText("");
                            sanPhamKhongThanhVienDefaultTableModel.addRow(new Object[]{
                                sanPhamKhongThanhVienDefaultTableModel.getRowCount() + 1, maSanPham, sanPham.getTenSanPham(), soLuong, format.format(sanPham.getDonGia()), format.format(sanPham.getDonGia() * soLuong)
                            });

                            long maHoaDon = Long.parseLong(maDonHangBHKTVjTextField.getText());
                            ChiTietHoaDon chiTietHoaDon = new ChiTietHoaDon();
                            chiTietHoaDon.setMaHoaDonChiTiet(maHoaDon);
                            chiTietHoaDon.setMaSanPhamMua(maSanPham);
                            chiTietHoaDon.setGiaSanPhamMua(sanPham.getDonGia());
                            chiTietHoaDon.setSoLuongMua(soLuong);
                            if (ChiTietHoaDonDAO.themChiTietHoaDon(chiTietHoaDon)) {
                                SanPhamDAO.capNhapSoLuongSanPham(maSanPham, sanPham.getSoLuong() - soLuong);
                                koThanhVienDefaultTableModel.setRowCount(0);
                                loadBanHang();
                                JOptionPane.showMessageDialog(null, "Đã thêm sản phẩm!", "Message", JOptionPane.INFORMATION_MESSAGE, dung);
                                setMacDinhBHKTV();
                            } else {
                                JOptionPane.showMessageDialog(null, "Có lỗi xảy ra, thử lại sau!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Sản phẩm không đủ số lượng!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

                        }
                    }
                }
            } else {

                String maSanPham = maSanPhamBHKTVjComboBox.getSelectedItem().toString();
                int soLuong = Integer.parseInt(soLuongBHKTVjTextField.getText());
                if (maSanPham.equals("") || String.valueOf(soLuong).equals("")) {
                    JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                } else {
                    if (kiemTraTrungLapMaSanPham(sanPhamKhongThanhVienDefaultTableModel, sanPhamBHKTVjTable, maSanPham)) {
                        JOptionPane.showMessageDialog(null, "Trùng lặp mã sản phẩm, vui lòng nhập lại!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                        sanPhamKhongThanhVienDefaultTableModel.setRowCount(0);
                    } else {
                        if (SanPhamDAO.kiemTraDuSoLuong(maSanPham, soLuong)) {
                            SanPham sanPham = SanPhamDAO.getMotSanPham(maSanPham);
                            maSanPhamBHKTVjComboBox.removeAllItems();
                            loadMaSanPhamBHKTV();
                            soLuongBHKTVjTextField.setText("");
                            sanPhamKhongThanhVienDefaultTableModel.addRow(new Object[]{
                                sanPhamKhongThanhVienDefaultTableModel.getRowCount() + 1, maSanPham, sanPham.getTenSanPham(), soLuong, format.format(sanPham.getDonGia()), format.format(sanPham.getDonGia() * soLuong)
                            });
                        } else {
                            JOptionPane.showMessageDialog(null, "Sản phẩm không đủ số lượng!", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

                        }
                    }
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kiểm tra giá trị nhập vào", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

        }
    }//GEN-LAST:event_themSLBHKTVjButtonActionPerformed

    private void ngayMuaBHKTVjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngayMuaBHKTVjTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ngayMuaBHKTVjTextFieldActionPerformed

    private void themBHKTVjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themBHKTVjButtonActionPerformed
        // TODO add your handling code here:
        try {

            int count = sanPhamKhongThanhVienDefaultTableModel.getRowCount();
            if (count == 0) {
                JOptionPane.showMessageDialog(null, "Vui lòng thêm sản phẩm ", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

            } else {
                String tenKhachHang = hoTenBHKTVjTextField.getText();
                String soDienThoaiKH = soDienThoaiBHKTVjTextField.getText();
                String diaChiKhachHang = diaChiBHKTVjTextField.getText();
                String maNhanVien = maNhanVienBHKTVjTextField.getText();
                long maHoaDon = new Date().getTime();

                if (tenKhachHang.equals("") || soDienThoaiKH.equals("")) {
                    JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                } else {
                    HoaDon hoaDon = new HoaDon();
                    hoaDon.setMaHoaDon(maHoaDon);
                    hoaDon.setTenKhachHangMua(tenKhachHang);
                    hoaDon.setDiaChiKhachHangMua(diaChiKhachHang);
                    hoaDon.setSoDienThoaiKH(soDienThoaiKH);
                    hoaDon.setNgayMua(new Timestamp(new Date().getTime()));
                    hoaDon.setMaNhanVienBan(maNhanVien);
                    if (HoaDonDAO.themHoaDon(hoaDon)) {
                        ArrayList<SanPham> listSanPhamMua = new ArrayList<>();
                        for (int i = 0; i < sanPhamKhongThanhVienDefaultTableModel.getRowCount(); i++) {
                            SanPham sanPhamMua = new SanPham();
                            sanPhamMua.setMaSanPham(sanPhamKhongThanhVienDefaultTableModel.getValueAt(i, 1).toString());
                            sanPhamMua.setTenSanPham(sanPhamKhongThanhVienDefaultTableModel.getValueAt(i, 2).toString());
                            sanPhamMua.setSoLuong(Integer.parseInt(sanPhamKhongThanhVienDefaultTableModel.getValueAt(i, 3).toString()));
                            sanPhamMua.setDonGia(Double.parseDouble(sanPhamKhongThanhVienDefaultTableModel.getValueAt(i, 4).toString()));
                            listSanPhamMua.add(sanPhamMua);
                        }
                        ArrayList<ChiTietHoaDon> listChiTietHoaDon = new ArrayList<>();
                        for (int i = 0; i < listSanPhamMua.size(); i++) {
                            ChiTietHoaDon chiTietHoaDon = new ChiTietHoaDon();
                            chiTietHoaDon.setMaHoaDonChiTiet(maHoaDon);
                            chiTietHoaDon.setMaSanPhamMua(listSanPhamMua.get(i).getMaSanPham());
                            chiTietHoaDon.setSoLuongMua(listSanPhamMua.get(i).getSoLuong());
                            SanPham sanPham = SanPhamDAO.getMotSanPham(listSanPhamMua.get(i).getMaSanPham());
                            chiTietHoaDon.setGiaSanPhamMua(listSanPhamMua.get(i).getDonGia());
                            ChiTietHoaDonDAO.themChiTietHoaDon(chiTietHoaDon);
                            SanPham sanPhamCapNhapSoLuong = SanPhamDAO.getMotSanPham(listSanPhamMua.get(i).getMaSanPham());
                            SanPhamDAO.capNhapSoLuongSanPham(listSanPhamMua.get(i).getMaSanPham(), sanPhamCapNhapSoLuong.getSoLuong() - listSanPhamMua.get(i).getSoLuong());
                            listChiTietHoaDon.add(chiTietHoaDon);
                            // thêm db xong phải thêm vô cột
                            koThanhVienDefaultTableModel.addRow(new Object[]{
                                maHoaDon,
                                tenKhachHang,
                                diaChiKhachHang,
                                soDienThoaiKH,
                                chiTietHoaDon.getMaSanPhamMua(),
                                sanPham.getTenSanPham(),
                                format.format(chiTietHoaDon.getGiaSanPhamMua()),
                                chiTietHoaDon.getSoLuongMua(),
                                format.format(chiTietHoaDon.tinhTien()),
                                hoaDon.getNgayMua(),
                                hoaDon.getMaNhanVienBan()
                            });

                        }

                        JOptionPane.showMessageDialog(null, "Đã thêm", "Message", JOptionPane.INFORMATION_MESSAGE, dung);
                    }

                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kiểm tra giá trị nhập vào", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
        }
        sanPhamKhongThanhVienDefaultTableModel.setRowCount(0);
        hoTenBHKTVjTextField.setText("");
        diaChiBHKTVjTextField.setText("");
        soDienThoaiBHKTVjTextField.setText("");
        banHangKTVjTable.clearSelection();
    }//GEN-LAST:event_themBHKTVjButtonActionPerformed

    private void suaBHKTVjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suaBHKTVjButtonActionPerformed
        // TODO add your handling code here:
        try {
            int row = banHangKTVjTable.getSelectedRow();
            if (row != -1) {
                long maHoaDon = Long.parseLong(maDonHangBHKTVjTextField.getText());
                Timestamp ngayMua = Timestamp.valueOf(koThanhVienDefaultTableModel.getValueAt(row, 9).toString());
                int soLuongMoi = Integer.parseInt(soLuongBHKTVjTextField.getText());
                int soLuongCu = Integer.parseInt(koThanhVienDefaultTableModel.getValueAt(row, 7).toString());
                String maSanPhamMoi = maSanPhamBHKTVjComboBox.getSelectedItem().toString();
                String maSanPhamCu = koThanhVienDefaultTableModel.getValueAt(row, 4).toString();
                String tenKhachHang = hoTenBHKTVjTextField.getText();
                String diaChiKH = diaChiBHKTVjTextField.getText();
                String soDienThoaiKH = soDienThoaiBHKTVjTextField.getText();
                if (tenKhachHang.equals("") || soDienThoaiKH.equals("")) {
                    JOptionPane.showMessageDialog(null, "Vui lòng điền vào các trường bắt buộc", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

                } else {
                    HoaDon hoaDon = new HoaDon();
                    if (maSanPhamCu.equals(maSanPhamMoi)) {

                        if (soLuongMoi > soLuongCu) {
                            int chenhLech = soLuongMoi - soLuongCu;
                            if (SanPhamDAO.kiemTraDuSoLuong(maSanPhamMoi, soLuongMoi)) {
                                SanPham sanPham = SanPhamDAO.getMotSanPham(maSanPhamCu);
                                SanPhamDAO.capNhapSoLuongSanPham(maSanPhamMoi, sanPham.getSoLuong() - chenhLech);

                            } else {
                                JOptionPane.showMessageDialog(null, "Sản phẩm không còn đủ số lượng", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                            }
                        } else if (soLuongMoi < soLuongCu) {
                            int chenhLech = soLuongCu - soLuongMoi;
                            SanPham sanPham = SanPhamDAO.getMotSanPham(maSanPhamCu);
                            SanPhamDAO.capNhapSoLuongSanPham(maSanPhamMoi, sanPham.getSoLuong() + chenhLech);
                        } else {
                            JOptionPane.showMessageDialog(null, "Mã sản phẩm và số lượng không có gì thay đổi", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

                        }
                        ChiTietHoaDon chiTietHoaDon = new ChiTietHoaDon();
                        chiTietHoaDon.setMaHoaDonChiTiet(maHoaDon);
                        chiTietHoaDon.setMaSanPhamMua(maSanPhamMoi);
                        SanPham sanPham = SanPhamDAO.getMotSanPham(maSanPhamMoi);
                        chiTietHoaDon.setGiaSanPhamMua(sanPham.getDonGia());
                        chiTietHoaDon.setSoLuongMua(soLuongMoi);
                        ChiTietHoaDonDAO.capNhapMotChiTietHoaDon(maHoaDon, chiTietHoaDon, maSanPhamCu);
//                        if (ChiTietHoaDonDAO.capNhapMotChiTietHoaDon(maHoaDon, chiTietHoaDon, maSanPhamCu)) {
                        //                        }
                        //                        sanPhamThanhVienDefaultTableModel.setRowCount(0);
                        //                        ArrayList<ChiTietHoaDon> listchiTietHoaDon = ChiTietHoaDonDAO.getMotChiTietHoaDon(maHoaDon);
                        //                        for (int i = 0; i < listchiTietHoaDon.size(); i++) {
                        //                            SanPham sanPham1 = SanPhamDAO.getMotSanPham(maSanPhamMoi);
                        //                            sanPhamThanhVienDefaultTableModel.addRow(new Object[]{
                        //                                i + 1,
                        //                                listchiTietHoaDon.get(i).getMaSanPhamMua(),
                        //                                sanPham1.getTenSanPham(),
                        //                                listchiTietHoaDon.get(i).getSoLuongMua(),
                        //                                listchiTietHoaDon.get(i).getGiaSanPhamMua(),
                        //                                format.format(listchiTietHoaDon.get(i).getSoLuongMua() * listchiTietHoaDon.get(i).getGiaSanPhamMua())
                        //
                        //                            });
                        //                        }
                        HoaDonDAO.suaKhachHangKhongThanhVienHoaDon(tenKhachHang, soDienThoaiKH, diaChiKH, maHoaDon);
                        koThanhVienDefaultTableModel.setRowCount(0);
                        loadBanHang();
                        JOptionPane.showMessageDialog(null, "Đã sửa", "Message", JOptionPane.INFORMATION_MESSAGE, dung);

                    } else {
                        if (kiemTraTrungLapMaSanPham(sanPhamKhongThanhVienDefaultTableModel, sanPhamBHKTVjTable, maSanPhamMoi)) {
                            JOptionPane.showMessageDialog(null, "Xảy ra trùng lặp mã sản phẩm", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                        } else {
                            if (SanPhamDAO.kiemTraDuSoLuong(maSanPhamMoi, soLuongMoi)) {
                                SanPham sanPhamCu = SanPhamDAO.getMotSanPham(maSanPhamCu);
                                SanPhamDAO.capNhapSoLuongSanPham(maSanPhamCu, sanPhamCu.getSoLuong() + soLuongCu);
                                SanPham sanPhamMoi = SanPhamDAO.getMotSanPham(maSanPhamMoi);
                                SanPhamDAO.capNhapSoLuongSanPham(maSanPhamMoi, sanPhamMoi.getSoLuong() - soLuongMoi);

                                ChiTietHoaDon chiTietHoaDon = new ChiTietHoaDon();
                                chiTietHoaDon.setMaHoaDonChiTiet(maHoaDon);
                                chiTietHoaDon.setMaSanPhamMua(maSanPhamMoi);
                                SanPham sanPham = SanPhamDAO.getMotSanPham(maSanPhamMoi);
                                chiTietHoaDon.setGiaSanPhamMua(sanPham.getDonGia());
                                chiTietHoaDon.setSoLuongMua(soLuongMoi);
                                ChiTietHoaDonDAO.capNhapMotChiTietHoaDon(maHoaDon, chiTietHoaDon, maSanPhamCu);

//                                sanPhamKhongThanhVienDefaultTableModel.setRowCount(0);
//                                ArrayList<ChiTietHoaDon> listchiTietHoaDon = ChiTietHoaDonDAO.getMotChiTietHoaDon(maHoaDon);
//                                for (int i = 0; i < listchiTietHoaDon.size(); i++) {
//                                    SanPham sanPham1 = SanPhamDAO.getMotSanPham(maSanPhamMoi);
//                                    sanPhamKhongThanhVienDefaultTableModel.addRow(new Object[]{
//                                        i + 1,
//                                        listchiTietHoaDon.get(i).getMaSanPhamMua(),
//                                        sanPham1.getTenSanPham(),
//                                        listchiTietHoaDon.get(i).getSoLuongMua(),
//                                        listchiTietHoaDon.get(i).getGiaSanPhamMua(),
//                                        format.format(listchiTietHoaDon.get(i).getSoLuongMua() * listchiTietHoaDon.get(i).getGiaSanPhamMua())
//
//                                    });
//                                }
                                HoaDonDAO.suaKhachHangKhongThanhVienHoaDon(tenKhachHang, soDienThoaiKH, diaChiKH, maHoaDon);
                                koThanhVienDefaultTableModel.setRowCount(0);
                                loadBanHang();
                                JOptionPane.showMessageDialog(null, "Đã sửa", "Message", JOptionPane.INFORMATION_MESSAGE, dung);

                            } else {
                                JOptionPane.showMessageDialog(null, "Sản phẩm mới không còn đủ số lượng", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                            }
                        }

                    }

                }

            } else {
                JOptionPane.showMessageDialog(null, "Chọn một đơn hàng để sửa", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        sanPhamKhongThanhVienDefaultTableModel.setRowCount(0);
        soLuongBHKTVjTextField.setText("");
        maSanPhamBHKTVjComboBox.removeAllItems();
        loadMaSanPhamBHKTV();
        maDonHangBHKTVjTextField.setText("");
        maDonHangBHKTVjTextField.setEditable(false);
        ngayMuaBHKTVjTextField.setText("");
        ngayMuaBHKTVjTextField.setEditable(false);
        hoTenBHKTVjTextField.setText("");
        diaChiBHKTVjTextField.setText("");
        soDienThoaiBHKTVjTextField.setText("");
        huyBHKTVjButton.setEnabled(false);
        themBHKTVjButton.setEnabled(true);
        themSLBHKTVjButton.setEnabled(true);
    }//GEN-LAST:event_suaBHKTVjButtonActionPerformed

    private void banHangKTVjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_banHangKTVjTableMouseClicked
        // TODO add your handling code here:
        try {
            huyBHKTVjButton.setEnabled(true);
            themBHKTVjButton.setEnabled(false);
            sanPhamKhongThanhVienDefaultTableModel.setRowCount(0);
            int row = banHangKTVjTable.getSelectedRow();
            maDonHangBHKTVjTextField.setText(koThanhVienDefaultTableModel.getValueAt(row, 0).toString());
            maDonHangBHKTVjTextField.setEditable(false);
            ngayMuaBHKTVjTextField.setText(koThanhVienDefaultTableModel.getValueAt(row, 9).toString());
            ngayMuaBHKTVjTextField.setEditable(false);
            soLuongBHKTVjTextField.setText(koThanhVienDefaultTableModel.getValueAt(row, 7).toString());

            hoTenBHKTVjTextField.setText(koThanhVienDefaultTableModel.getValueAt(row, 1).toString());
            diaChiBHKTVjTextField.setText(koThanhVienDefaultTableModel.getValueAt(row, 2).toString());
            soDienThoaiBHKTVjTextField.setText(koThanhVienDefaultTableModel.getValueAt(row, 3).toString());

            maSanPhamBHKTVjComboBox.removeAllItems();
            maSanPhamBHKTVjComboBox.addItem(koThanhVienDefaultTableModel.getValueAt(row, 4).toString());
            ArrayList<ChiTietHoaDon> listChiTietHoaDon = ChiTietHoaDonDAO.getMotChiTietHoaDon(Long.parseLong(koThanhVienDefaultTableModel.getValueAt(row, 0).toString()));
            for (int i = 0; i < listChiTietHoaDon.size(); i++) {
                SanPham sanPham = SanPhamDAO.getMotSanPham(listChiTietHoaDon.get(i).getMaSanPhamMua());
                sanPhamKhongThanhVienDefaultTableModel.addRow(new Object[]{
                    i + 1,
                    listChiTietHoaDon.get(i).getMaSanPhamMua(),
                    sanPham.getTenSanPham(),
                    listChiTietHoaDon.get(i).getSoLuongMua(),
                    format.format(listChiTietHoaDon.get(i).getGiaSanPhamMua()),
                    format.format(listChiTietHoaDon.get(i).tinhTien()),});
            }

            listSanPham = SanPhamDAO.getListSanPham();
            for (int i = 0; i < listSanPham.size(); i++) {
                if (listSanPham.get(i).getMaSanPham().equals(koThanhVienDefaultTableModel.getValueAt(row, 4).toString())) {
                } else {
                    maSanPhamBHKTVjComboBox.addItem(listSanPham.get(i).getMaSanPham());

                }
            }

        } catch (Exception e) {
        }
    }//GEN-LAST:event_banHangKTVjTableMouseClicked

    private void sanPhamBHKTVjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sanPhamBHKTVjTableMouseClicked
        // TODO add your handling code here:
        int row = sanPhamBHKTVjTable.getSelectedRow();
        maSanPhamBHKTVjComboBox.removeAllItems();
        maSanPhamBHKTVjComboBox.addItem(sanPhamKhongThanhVienDefaultTableModel.getValueAt(row, 1).toString());
        listSanPham = SanPhamDAO.getListSanPham();
        for (int i = 0; i < listSanPham.size(); i++) {
            if (listSanPham.get(i).getMaSanPham().equals(sanPhamKhongThanhVienDefaultTableModel.getValueAt(row, 1).toString())) {
            } else {
                maSanPhamBHKTVjComboBox.addItem(listSanPham.get(i).getMaSanPham());

            }
        }
        soLuongBHKTVjTextField.setText(sanPhamKhongThanhVienDefaultTableModel.getValueAt(row, 4).toString());
    }//GEN-LAST:event_sanPhamBHKTVjTableMouseClicked

    private void xoaBHKTVjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xoaBHKTVjButtonActionPerformed
        // TODO add your handling code here:
        try {
            int row = banHangKTVjTable.getSelectedRow();
            if (row != -1) {
                long maHoaDon = Long.parseLong(maDonHangBHKTVjTextField.getText());
                int luaChon = JOptionPane.showConfirmDialog(null, "Bạn có chắn chắn muốn xóa không", "Message", JOptionPane.YES_NO_OPTION);
                if (luaChon == JOptionPane.YES_OPTION) {
                    if (HoaDonDAO.xoaHoaDon(maHoaDon)) {
                        koThanhVienDefaultTableModel.setRowCount(0);
                        loadBanHang();
                        JOptionPane.showMessageDialog(null, "Đã xóa", "Message", JOptionPane.INFORMATION_MESSAGE, dung);
                    } else {
                        JOptionPane.showMessageDialog(null, "Xãy ra lỗi, vui lòng thử lại sau", "Message", JOptionPane.INFORMATION_MESSAGE, dung);

                    }
                } else if (luaChon == JOptionPane.NO_OPTION) {

                    JOptionPane.showMessageDialog(null, "Đã hủy việc xóa", "Message", JOptionPane.INFORMATION_MESSAGE, sai);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Chọn một đơn hàng để xóa", "Message", JOptionPane.INFORMATION_MESSAGE, sai);

            }
        } catch (Exception e) {
        }
        sanPhamKhongThanhVienDefaultTableModel.setRowCount(0);
        soLuongBHKTVjTextField.setText("");

        maSanPhamBHKTVjComboBox.removeAllItems();

        loadMaSanPhamBHKTV();

        maDonHangBHKTVjTextField.setText("");
        maDonHangBHKTVjTextField.setEditable(false);
        ngayMuaBHKTVjTextField.setText("");
        ngayMuaBHKTVjTextField.setEditable(false);

        hoTenBHKTVjTextField.setText("");
        diaChiBHKTVjTextField.setText("");
        soDienThoaiBHKTVjTextField.setText("");

        huyBHKTVjButton.setEnabled(false);
        themBHKTVjButton.setEnabled(true);
        themSLBHKTVjButton.setEnabled(true);

    }//GEN-LAST:event_xoaBHKTVjButtonActionPerformed

    public void setMacDinhBHKTV(){
        sanPhamKhongThanhVienDefaultTableModel.setRowCount(0);
        soLuongBHKTVjTextField.setText("");

        maSanPhamBHKTVjComboBox.removeAllItems();

        loadMaSanPhamBHKTV();

        maDonHangBHKTVjTextField.setText("");
        maDonHangBHKTVjTextField.setEditable(false);
        ngayMuaBHKTVjTextField.setText("");
        ngayMuaBHKTVjTextField.setEditable(false);

        hoTenBHKTVjTextField.setText("");
        diaChiBHKTVjTextField.setText("");
        soDienThoaiBHKTVjTextField.setText("");

        huyBHKTVjButton.setEnabled(false);
        themBHKTVjButton.setEnabled(true);
        themSLBHKTVjButton.setEnabled(true);
        banHangKTVjTable.clearSelection();
    }
    
    private void huyBHKTVjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_huyBHKTVjButtonActionPerformed
        // TODO add your handling code here:
        setMacDinhBHKTV();

    }//GEN-LAST:event_huyBHKTVjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable banHangKTVjTable;
    private javax.swing.JTable banhangTVjTable;
    private javax.swing.JLabel diaChiBHKTVjLabel;
    private javax.swing.JTextField diaChiBHKTVjTextField;
    private javax.swing.JLabel hoTenBHKTVjLabel;
    private javax.swing.JTextField hoTenBHKTVjTextField;
    private javax.swing.JButton huyBHKTVjButton;
    private javax.swing.JButton huyBHtvjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel maDonHangBHKTVjLabel;
    private javax.swing.JTextField maDonHangBHKTVjTextField;
    private javax.swing.JLabel maDonHangBHtvjLabel;
    private javax.swing.JTextField maDonHangBHtvjTextField;
    private javax.swing.JComboBox<String> maKhachHangBHTVjComboBox;
    private javax.swing.JLabel maKhachHangBHtvjLabel;
    private javax.swing.JLabel maNhanVienBHKTVjLabel;
    private javax.swing.JTextField maNhanVienBHKTVjTextField;
    private javax.swing.JTextField maNhanVienBHTVjTextField;
    private javax.swing.JLabel maNhanVienBHtvjLabel;
    private javax.swing.JComboBox<String> maSanPhamBHKTVjComboBox;
    private javax.swing.JLabel maSanPhamBHKTVjLabel;
    private javax.swing.JComboBox<String> maSanPhamBHtvjComboBox;
    private javax.swing.JLabel maSanPhamBHtvjLabel;
    private javax.swing.JTextField ngayMuaBHKTVjTextField;
    private javax.swing.JTextField ngayMuaBHTVjTextField;
    private javax.swing.JLabel ngayMuaBHtvjLabel;
    private javax.swing.JLabel ngayMuaBHtvjLabel1;
    private javax.swing.JButton nhapBHKTVjButton;
    private javax.swing.JButton nhapBHtvjButton;
    private javax.swing.JTable sanPhamBHKTVjTable;
    private javax.swing.JTable sanPhamBHTVjTable;
    private javax.swing.JLabel soDienThoaiBHKTVjLabel;
    private javax.swing.JTextField soDienThoaiBHKTVjTextField;
    private javax.swing.JTextField soLuongBHKTVjTextField;
    private javax.swing.JLabel soLuongBHktvjLabel;
    private javax.swing.JLabel soLuongBHtvjLabel;
    private javax.swing.JTextField soLuongBHtvjTextField;
    private javax.swing.JButton suaBHKTVjButton;
    private javax.swing.JButton suaBHtvjButton;
    private javax.swing.JButton themBHKTVjButton;
    private javax.swing.JButton themBHtvjButton;
    private javax.swing.JButton themSLBHKTVjButton;
    private javax.swing.JButton themSLBHTVjButton;
    private javax.swing.JButton xoaBHKTVjButton;
    private javax.swing.JButton xoaBHtvjButton;
    private javax.swing.JButton xuatBHKTVjButton;
    private javax.swing.JButton xuatBHtvjButton;
    // End of variables declaration//GEN-END:variables
}
